// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2019 13:45:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    aes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module aes_vlg_sample_tst(
	chave1,
	chave2,
	msg,
	sampler_tx
);
input [63:0] chave1;
input [63:0] chave2;
input [63:0] msg;
output sampler_tx;

reg sample;
time current_time;
always @(chave1 or chave2 or msg)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module aes_vlg_check_tst (
	mensagem_criptografada,
	sampler_rx
);
input [17:0] mensagem_criptografada;
input sampler_rx;

reg [17:0] mensagem_criptografada_expected;

reg [17:0] mensagem_criptografada_prev;

reg [17:0] mensagem_criptografada_expected_prev;

reg [17:0] last_mensagem_criptografada_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	mensagem_criptografada_prev = mensagem_criptografada;
end

// update expected /o prevs

always @(trigger)
begin
	mensagem_criptografada_expected_prev = mensagem_criptografada_expected;
end


// expected mensagem_criptografada[ 17 ]
initial
begin
	mensagem_criptografada_expected[17] = 1'bX;
end 
// expected mensagem_criptografada[ 16 ]
initial
begin
	mensagem_criptografada_expected[16] = 1'bX;
end 
// expected mensagem_criptografada[ 15 ]
initial
begin
	mensagem_criptografada_expected[15] = 1'bX;
end 
// expected mensagem_criptografada[ 14 ]
initial
begin
	mensagem_criptografada_expected[14] = 1'bX;
end 
// expected mensagem_criptografada[ 13 ]
initial
begin
	mensagem_criptografada_expected[13] = 1'bX;
end 
// expected mensagem_criptografada[ 12 ]
initial
begin
	mensagem_criptografada_expected[12] = 1'bX;
end 
// expected mensagem_criptografada[ 11 ]
initial
begin
	mensagem_criptografada_expected[11] = 1'bX;
end 
// expected mensagem_criptografada[ 10 ]
initial
begin
	mensagem_criptografada_expected[10] = 1'bX;
end 
// expected mensagem_criptografada[ 9 ]
initial
begin
	mensagem_criptografada_expected[9] = 1'bX;
end 
// expected mensagem_criptografada[ 8 ]
initial
begin
	mensagem_criptografada_expected[8] = 1'bX;
end 
// expected mensagem_criptografada[ 7 ]
initial
begin
	mensagem_criptografada_expected[7] = 1'bX;
end 
// expected mensagem_criptografada[ 6 ]
initial
begin
	mensagem_criptografada_expected[6] = 1'bX;
end 
// expected mensagem_criptografada[ 5 ]
initial
begin
	mensagem_criptografada_expected[5] = 1'bX;
end 
// expected mensagem_criptografada[ 4 ]
initial
begin
	mensagem_criptografada_expected[4] = 1'bX;
end 
// expected mensagem_criptografada[ 3 ]
initial
begin
	mensagem_criptografada_expected[3] = 1'bX;
end 
// expected mensagem_criptografada[ 2 ]
initial
begin
	mensagem_criptografada_expected[2] = 1'bX;
end 
// expected mensagem_criptografada[ 1 ]
initial
begin
	mensagem_criptografada_expected[1] = 1'bX;
end 
// expected mensagem_criptografada[ 0 ]
initial
begin
	mensagem_criptografada_expected[0] = 1'bX;
end 
// generate trigger
always @(mensagem_criptografada_expected or mensagem_criptografada)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mensagem_criptografada = %b | ",mensagem_criptografada_expected_prev);
	$display("| real mensagem_criptografada = %b | ",mensagem_criptografada_prev);
`endif
	if (
		( mensagem_criptografada_expected_prev[0] !== 1'bx ) && ( mensagem_criptografada_prev[0] !== mensagem_criptografada_expected_prev[0] )
		&& ((mensagem_criptografada_expected_prev[0] !== last_mensagem_criptografada_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[0] = mensagem_criptografada_expected_prev[0];
	end
	if (
		( mensagem_criptografada_expected_prev[1] !== 1'bx ) && ( mensagem_criptografada_prev[1] !== mensagem_criptografada_expected_prev[1] )
		&& ((mensagem_criptografada_expected_prev[1] !== last_mensagem_criptografada_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[1] = mensagem_criptografada_expected_prev[1];
	end
	if (
		( mensagem_criptografada_expected_prev[2] !== 1'bx ) && ( mensagem_criptografada_prev[2] !== mensagem_criptografada_expected_prev[2] )
		&& ((mensagem_criptografada_expected_prev[2] !== last_mensagem_criptografada_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[2] = mensagem_criptografada_expected_prev[2];
	end
	if (
		( mensagem_criptografada_expected_prev[3] !== 1'bx ) && ( mensagem_criptografada_prev[3] !== mensagem_criptografada_expected_prev[3] )
		&& ((mensagem_criptografada_expected_prev[3] !== last_mensagem_criptografada_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[3] = mensagem_criptografada_expected_prev[3];
	end
	if (
		( mensagem_criptografada_expected_prev[4] !== 1'bx ) && ( mensagem_criptografada_prev[4] !== mensagem_criptografada_expected_prev[4] )
		&& ((mensagem_criptografada_expected_prev[4] !== last_mensagem_criptografada_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[4] = mensagem_criptografada_expected_prev[4];
	end
	if (
		( mensagem_criptografada_expected_prev[5] !== 1'bx ) && ( mensagem_criptografada_prev[5] !== mensagem_criptografada_expected_prev[5] )
		&& ((mensagem_criptografada_expected_prev[5] !== last_mensagem_criptografada_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[5] = mensagem_criptografada_expected_prev[5];
	end
	if (
		( mensagem_criptografada_expected_prev[6] !== 1'bx ) && ( mensagem_criptografada_prev[6] !== mensagem_criptografada_expected_prev[6] )
		&& ((mensagem_criptografada_expected_prev[6] !== last_mensagem_criptografada_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[6] = mensagem_criptografada_expected_prev[6];
	end
	if (
		( mensagem_criptografada_expected_prev[7] !== 1'bx ) && ( mensagem_criptografada_prev[7] !== mensagem_criptografada_expected_prev[7] )
		&& ((mensagem_criptografada_expected_prev[7] !== last_mensagem_criptografada_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[7] = mensagem_criptografada_expected_prev[7];
	end
	if (
		( mensagem_criptografada_expected_prev[8] !== 1'bx ) && ( mensagem_criptografada_prev[8] !== mensagem_criptografada_expected_prev[8] )
		&& ((mensagem_criptografada_expected_prev[8] !== last_mensagem_criptografada_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[8] = mensagem_criptografada_expected_prev[8];
	end
	if (
		( mensagem_criptografada_expected_prev[9] !== 1'bx ) && ( mensagem_criptografada_prev[9] !== mensagem_criptografada_expected_prev[9] )
		&& ((mensagem_criptografada_expected_prev[9] !== last_mensagem_criptografada_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[9] = mensagem_criptografada_expected_prev[9];
	end
	if (
		( mensagem_criptografada_expected_prev[10] !== 1'bx ) && ( mensagem_criptografada_prev[10] !== mensagem_criptografada_expected_prev[10] )
		&& ((mensagem_criptografada_expected_prev[10] !== last_mensagem_criptografada_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[10] = mensagem_criptografada_expected_prev[10];
	end
	if (
		( mensagem_criptografada_expected_prev[11] !== 1'bx ) && ( mensagem_criptografada_prev[11] !== mensagem_criptografada_expected_prev[11] )
		&& ((mensagem_criptografada_expected_prev[11] !== last_mensagem_criptografada_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[11] = mensagem_criptografada_expected_prev[11];
	end
	if (
		( mensagem_criptografada_expected_prev[12] !== 1'bx ) && ( mensagem_criptografada_prev[12] !== mensagem_criptografada_expected_prev[12] )
		&& ((mensagem_criptografada_expected_prev[12] !== last_mensagem_criptografada_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[12] = mensagem_criptografada_expected_prev[12];
	end
	if (
		( mensagem_criptografada_expected_prev[13] !== 1'bx ) && ( mensagem_criptografada_prev[13] !== mensagem_criptografada_expected_prev[13] )
		&& ((mensagem_criptografada_expected_prev[13] !== last_mensagem_criptografada_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[13] = mensagem_criptografada_expected_prev[13];
	end
	if (
		( mensagem_criptografada_expected_prev[14] !== 1'bx ) && ( mensagem_criptografada_prev[14] !== mensagem_criptografada_expected_prev[14] )
		&& ((mensagem_criptografada_expected_prev[14] !== last_mensagem_criptografada_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[14] = mensagem_criptografada_expected_prev[14];
	end
	if (
		( mensagem_criptografada_expected_prev[15] !== 1'bx ) && ( mensagem_criptografada_prev[15] !== mensagem_criptografada_expected_prev[15] )
		&& ((mensagem_criptografada_expected_prev[15] !== last_mensagem_criptografada_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[15] = mensagem_criptografada_expected_prev[15];
	end
	if (
		( mensagem_criptografada_expected_prev[16] !== 1'bx ) && ( mensagem_criptografada_prev[16] !== mensagem_criptografada_expected_prev[16] )
		&& ((mensagem_criptografada_expected_prev[16] !== last_mensagem_criptografada_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[16] = mensagem_criptografada_expected_prev[16];
	end
	if (
		( mensagem_criptografada_expected_prev[17] !== 1'bx ) && ( mensagem_criptografada_prev[17] !== mensagem_criptografada_expected_prev[17] )
		&& ((mensagem_criptografada_expected_prev[17] !== last_mensagem_criptografada_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[17] = mensagem_criptografada_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module aes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [63:0] chave1;
reg [63:0] chave2;
reg [63:0] msg;
// wires                                               
wire [17:0] mensagem_criptografada;

wire sampler;                             

// assign statements (if any)                          
aes i1 (
// port map - connection between master ports and signals/registers   
	.chave1(chave1),
	.chave2(chave2),
	.mensagem_criptografada(mensagem_criptografada),
	.msg(msg)
);
// chave1[ 63 ]
initial
begin
	chave1[63] = 1'b0;
end 
// chave1[ 62 ]
initial
begin
	chave1[62] = 1'b0;
end 
// chave1[ 61 ]
initial
begin
	chave1[61] = 1'b0;
end 
// chave1[ 60 ]
initial
begin
	chave1[60] = 1'b0;
end 
// chave1[ 59 ]
initial
begin
	chave1[59] = 1'b0;
end 
// chave1[ 58 ]
initial
begin
	chave1[58] = 1'b0;
end 
// chave1[ 57 ]
initial
begin
	chave1[57] = 1'b0;
end 
// chave1[ 56 ]
initial
begin
	chave1[56] = 1'b0;
end 
// chave1[ 55 ]
initial
begin
	chave1[55] = 1'b0;
end 
// chave1[ 54 ]
initial
begin
	chave1[54] = 1'b0;
end 
// chave1[ 53 ]
initial
begin
	chave1[53] = 1'b0;
end 
// chave1[ 52 ]
initial
begin
	chave1[52] = 1'b0;
end 
// chave1[ 51 ]
initial
begin
	chave1[51] = 1'b0;
end 
// chave1[ 50 ]
initial
begin
	chave1[50] = 1'b0;
end 
// chave1[ 49 ]
initial
begin
	chave1[49] = 1'b0;
end 
// chave1[ 48 ]
initial
begin
	chave1[48] = 1'b1;
end 
// chave1[ 47 ]
initial
begin
	chave1[47] = 1'b0;
end 
// chave1[ 46 ]
initial
begin
	chave1[46] = 1'b0;
end 
// chave1[ 45 ]
initial
begin
	chave1[45] = 1'b0;
end 
// chave1[ 44 ]
initial
begin
	chave1[44] = 1'b0;
end 
// chave1[ 43 ]
initial
begin
	chave1[43] = 1'b0;
end 
// chave1[ 42 ]
initial
begin
	chave1[42] = 1'b0;
end 
// chave1[ 41 ]
initial
begin
	chave1[41] = 1'b1;
end 
// chave1[ 40 ]
initial
begin
	chave1[40] = 1'b0;
end 
// chave1[ 39 ]
initial
begin
	chave1[39] = 1'b0;
end 
// chave1[ 38 ]
initial
begin
	chave1[38] = 1'b0;
end 
// chave1[ 37 ]
initial
begin
	chave1[37] = 1'b0;
end 
// chave1[ 36 ]
initial
begin
	chave1[36] = 1'b0;
end 
// chave1[ 35 ]
initial
begin
	chave1[35] = 1'b0;
end 
// chave1[ 34 ]
initial
begin
	chave1[34] = 1'b0;
end 
// chave1[ 33 ]
initial
begin
	chave1[33] = 1'b1;
end 
// chave1[ 32 ]
initial
begin
	chave1[32] = 1'b1;
end 
// chave1[ 31 ]
initial
begin
	chave1[31] = 1'b0;
end 
// chave1[ 30 ]
initial
begin
	chave1[30] = 1'b0;
end 
// chave1[ 29 ]
initial
begin
	chave1[29] = 1'b0;
end 
// chave1[ 28 ]
initial
begin
	chave1[28] = 1'b0;
end 
// chave1[ 27 ]
initial
begin
	chave1[27] = 1'b0;
end 
// chave1[ 26 ]
initial
begin
	chave1[26] = 1'b1;
end 
// chave1[ 25 ]
initial
begin
	chave1[25] = 1'b0;
end 
// chave1[ 24 ]
initial
begin
	chave1[24] = 1'b0;
end 
// chave1[ 23 ]
initial
begin
	chave1[23] = 1'b0;
end 
// chave1[ 22 ]
initial
begin
	chave1[22] = 1'b0;
end 
// chave1[ 21 ]
initial
begin
	chave1[21] = 1'b0;
end 
// chave1[ 20 ]
initial
begin
	chave1[20] = 1'b0;
end 
// chave1[ 19 ]
initial
begin
	chave1[19] = 1'b0;
end 
// chave1[ 18 ]
initial
begin
	chave1[18] = 1'b1;
end 
// chave1[ 17 ]
initial
begin
	chave1[17] = 1'b0;
end 
// chave1[ 16 ]
initial
begin
	chave1[16] = 1'b1;
end 
// chave1[ 15 ]
initial
begin
	chave1[15] = 1'b0;
end 
// chave1[ 14 ]
initial
begin
	chave1[14] = 1'b0;
end 
// chave1[ 13 ]
initial
begin
	chave1[13] = 1'b0;
end 
// chave1[ 12 ]
initial
begin
	chave1[12] = 1'b0;
	chave1[12] = #530000 1'b1;
end 
// chave1[ 11 ]
initial
begin
	chave1[11] = 1'b0;
	chave1[11] = #110000 1'b1;
	chave1[11] = #420000 1'b0;
	chave1[11] = #410000 1'b1;
end 
// chave1[ 10 ]
initial
begin
	chave1[10] = 1'b1;
	chave1[10] = #110000 1'b0;
	chave1[10] = #210000 1'b1;
	chave1[10] = #210000 1'b0;
	chave1[10] = #200000 1'b1;
	chave1[10] = #210000 1'b0;
end 
// chave1[ 9 ]
initial
begin
	repeat(3)
	begin
		chave1[9] = 1'b1;
		chave1[9] = #110000 1'b0;
		# 100000;
	end
	chave1[9] = 1'b1;
	chave1[9] = #100000 1'b0;
	chave1[9] = #110000 1'b1;
	chave1[9] = #100000 1'b0;
end 
// chave1[ 8 ]
initial
begin
	chave1[8] = 1'b0;
	# 60000;
	repeat(2)
	begin
		chave1[8] = 1'b1;
		chave1[8] = #50000 1'b0;
		# 50000;
	end
	repeat(2)
	begin
		chave1[8] = 1'b1;
		chave1[8] = #60000 1'b0;
		chave1[8] = #50000 1'b1;
		chave1[8] = #50000 1'b0;
		# 50000;
	end
	chave1[8] = 1'b1;
	chave1[8] = #50000 1'b0;
	chave1[8] = #60000 1'b1;
	chave1[8] = #50000 1'b0;
	chave1[8] = #50000 1'b1;
	chave1[8] = #50000 1'b0;
end 
// chave1[ 7 ]
initial
begin
	chave1[7] = 1'b0;
	# 30000;
	repeat(2)
	begin
		chave1[7] = 1'b1;
		chave1[7] = #30000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		chave1[7] = 1'b1;
		# 30000;
		repeat(2)
		begin
			chave1[7] = 1'b0;
			chave1[7] = #30000 1'b1;
			# 20000;
		end
		chave1[7] = 1'b0;
		chave1[7] = #30000 1'b1;
		chave1[7] = #30000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		chave1[7] = 1'b1;
		chave1[7] = #30000 1'b0;
		chave1[7] = #20000 1'b1;
		# 30000;
		repeat(2)
		begin
			chave1[7] = 1'b0;
			chave1[7] = #30000 1'b1;
			# 20000;
		end
		chave1[7] = 1'b0;
		# 30000;
	end
	chave1[7] = 1'b1;
end 
// chave1[ 6 ]
initial
begin
	chave1[6] = 1'b0;
	# 20000;
	repeat(2)
	begin
		chave1[6] = 1'b1;
		chave1[6] = #10000 1'b0;
		chave1[6] = #10000 1'b1;
		chave1[6] = #20000 1'b0;
		# 10000;
	end
	chave1[6] = 1'b1;
	chave1[6] = #10000 1'b0;
	chave1[6] = #20000 1'b1;
	chave1[6] = #10000 1'b0;
	chave1[6] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		chave1[6] = 1'b0;
		chave1[6] = #10000 1'b1;
		chave1[6] = #10000 1'b0;
		chave1[6] = #20000 1'b1;
		# 10000;
	end
	chave1[6] = 1'b0;
	chave1[6] = #10000 1'b1;
	chave1[6] = #20000 1'b0;
	chave1[6] = #10000 1'b1;
	chave1[6] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		chave1[6] = 1'b1;
		chave1[6] = #10000 1'b0;
		chave1[6] = #10000 1'b1;
		chave1[6] = #20000 1'b0;
		# 10000;
	end
	chave1[6] = 1'b1;
	chave1[6] = #10000 1'b0;
	chave1[6] = #20000 1'b1;
	# 10000;
	repeat(2)
	begin
		chave1[6] = 1'b0;
		chave1[6] = #10000 1'b1;
		# 20000;
		repeat(2)
		begin
			chave1[6] = 1'b0;
			chave1[6] = #10000 1'b1;
			chave1[6] = #10000 1'b0;
			chave1[6] = #20000 1'b1;
			# 10000;
		end
	end
	chave1[6] = 1'b0;
	chave1[6] = #10000 1'b1;
	chave1[6] = #20000 1'b0;
	chave1[6] = #10000 1'b1;
	chave1[6] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		chave1[6] = 1'b1;
		chave1[6] = #10000 1'b0;
		chave1[6] = #10000 1'b1;
		chave1[6] = #20000 1'b0;
		# 10000;
	end
	chave1[6] = 1'b1;
	chave1[6] = #10000 1'b0;
	chave1[6] = #20000 1'b1;
	chave1[6] = #10000 1'b0;
	chave1[6] = #10000 1'b1;
end 
// chave1[ 5 ]
initial
begin
	chave1[5] = 1'b0;
	chave1[5] = #10000 1'b1;
	chave1[5] = #20000 1'b0;
	# 20000;
	repeat(2)
	begin
		chave1[5] = 1'b1;
		chave1[5] = #20000 1'b0;
		# 30000;
		repeat(3)
		begin
			chave1[5] = 1'b1;
			chave1[5] = #20000 1'b0;
			# 20000;
		end
	end
	chave1[5] = 1'b1;
	# 30000;
	repeat(3)
	begin
		chave1[5] = 1'b0;
		chave1[5] = #20000 1'b1;
		# 20000;
	end
	chave1[5] = 1'b0;
	chave1[5] = #20000 1'b1;
	# 30000;
	repeat(3)
	begin
		chave1[5] = 1'b0;
		chave1[5] = #20000 1'b1;
		# 20000;
	end
	chave1[5] = 1'b0;
	# 30000;
	repeat(3)
	begin
		chave1[5] = 1'b1;
		chave1[5] = #20000 1'b0;
		# 20000;
	end
	chave1[5] = 1'b1;
	chave1[5] = #20000 1'b0;
	# 30000;
	repeat(2)
	begin
		chave1[5] = 1'b1;
		chave1[5] = #20000 1'b0;
		# 20000;
	end
	chave1[5] = 1'b1;
end 
// chave1[ 4 ]
initial
begin
	repeat(4)
	begin
		chave1[4] = 1'b0;
		chave1[4] = #10000 1'b1;
		# 10000;
	end
	repeat(2)
	begin
		chave1[4] = 1'b0;
		# 20000;
		repeat(7)
		begin
			chave1[4] = 1'b1;
			chave1[4] = #10000 1'b0;
			# 10000;
		end
		chave1[4] = 1'b1;
		# 20000;
		repeat(7)
		begin
			chave1[4] = 1'b0;
			chave1[4] = #10000 1'b1;
			# 10000;
		end
	end
	chave1[4] = 1'b0;
	# 20000;
	repeat(7)
	begin
		chave1[4] = 1'b1;
		chave1[4] = #10000 1'b0;
		# 10000;
	end
	chave1[4] = 1'b1;
	# 20000;
	repeat(5)
	begin
		chave1[4] = 1'b0;
		chave1[4] = #10000 1'b1;
		# 10000;
	end
end 
// chave1[ 3 ]
initial
begin
	chave1[3] = 1'b0;
	# 10000;
	repeat(6)
	begin
		chave1[3] = 1'b1;
		chave1[3] = #80000 1'b0;
		# 80000;
	end
	chave1[3] = 1'b1;
end 
// chave1[ 2 ]
initial
begin
	chave1[2] = 1'b1;
	# 10000;
	repeat(12)
	begin
		chave1[2] = 1'b0;
		chave1[2] = #40000 1'b1;
		# 40000;
	end
	chave1[2] = 1'b0;
end 
// chave1[ 1 ]
initial
begin
	chave1[1] = 1'b1;
	# 10000;
	repeat(24)
	begin
		chave1[1] = 1'b0;
		chave1[1] = #20000 1'b1;
		# 20000;
	end
	chave1[1] = 1'b0;
	chave1[1] = #20000 1'b1;
end 
// chave1[ 0 ]
always
begin
	chave1[0] = 1'b1;
	chave1[0] = #10000 1'b0;
	#10000;
end 
// chave2[ 63 ]
initial
begin
	chave2[63] = 1'b0;
end 
// chave2[ 62 ]
initial
begin
	chave2[62] = 1'b0;
end 
// chave2[ 61 ]
initial
begin
	chave2[61] = 1'b0;
end 
// chave2[ 60 ]
initial
begin
	chave2[60] = 1'b0;
end 
// chave2[ 59 ]
initial
begin
	chave2[59] = 1'b1;
end 
// chave2[ 58 ]
initial
begin
	chave2[58] = 1'b0;
end 
// chave2[ 57 ]
initial
begin
	chave2[57] = 1'b0;
end 
// chave2[ 56 ]
initial
begin
	chave2[56] = 1'b0;
end 
// chave2[ 55 ]
initial
begin
	chave2[55] = 1'b0;
end 
// chave2[ 54 ]
initial
begin
	chave2[54] = 1'b0;
end 
// chave2[ 53 ]
initial
begin
	chave2[53] = 1'b0;
end 
// chave2[ 52 ]
initial
begin
	chave2[52] = 1'b0;
end 
// chave2[ 51 ]
initial
begin
	chave2[51] = 1'b1;
end 
// chave2[ 50 ]
initial
begin
	chave2[50] = 1'b0;
end 
// chave2[ 49 ]
initial
begin
	chave2[49] = 1'b0;
end 
// chave2[ 48 ]
initial
begin
	chave2[48] = 1'b1;
end 
// chave2[ 47 ]
initial
begin
	chave2[47] = 1'b0;
end 
// chave2[ 46 ]
initial
begin
	chave2[46] = 1'b0;
end 
// chave2[ 45 ]
initial
begin
	chave2[45] = 1'b0;
end 
// chave2[ 44 ]
initial
begin
	chave2[44] = 1'b0;
end 
// chave2[ 43 ]
initial
begin
	chave2[43] = 1'b0;
end 
// chave2[ 42 ]
initial
begin
	chave2[42] = 1'b0;
end 
// chave2[ 41 ]
initial
begin
	chave2[41] = 1'b0;
end 
// chave2[ 40 ]
initial
begin
	chave2[40] = 1'b0;
end 
// chave2[ 39 ]
initial
begin
	chave2[39] = 1'b0;
end 
// chave2[ 38 ]
initial
begin
	chave2[38] = 1'b0;
end 
// chave2[ 37 ]
initial
begin
	chave2[37] = 1'b0;
end 
// chave2[ 36 ]
initial
begin
	chave2[36] = 1'b0;
end 
// chave2[ 35 ]
initial
begin
	chave2[35] = 1'b0;
end 
// chave2[ 34 ]
initial
begin
	chave2[34] = 1'b0;
end 
// chave2[ 33 ]
initial
begin
	chave2[33] = 1'b0;
end 
// chave2[ 32 ]
initial
begin
	chave2[32] = 1'b1;
end 
// chave2[ 31 ]
initial
begin
	chave2[31] = 1'b0;
end 
// chave2[ 30 ]
initial
begin
	chave2[30] = 1'b0;
end 
// chave2[ 29 ]
initial
begin
	chave2[29] = 1'b0;
end 
// chave2[ 28 ]
initial
begin
	chave2[28] = 1'b0;
end 
// chave2[ 27 ]
initial
begin
	chave2[27] = 1'b0;
end 
// chave2[ 26 ]
initial
begin
	chave2[26] = 1'b0;
end 
// chave2[ 25 ]
initial
begin
	chave2[25] = 1'b1;
end 
// chave2[ 24 ]
initial
begin
	chave2[24] = 1'b0;
end 
// chave2[ 23 ]
initial
begin
	chave2[23] = 1'b0;
end 
// chave2[ 22 ]
initial
begin
	chave2[22] = 1'b0;
end 
// chave2[ 21 ]
initial
begin
	chave2[21] = 1'b0;
end 
// chave2[ 20 ]
initial
begin
	chave2[20] = 1'b0;
end 
// chave2[ 19 ]
initial
begin
	chave2[19] = 1'b0;
end 
// chave2[ 18 ]
initial
begin
	chave2[18] = 1'b0;
end 
// chave2[ 17 ]
initial
begin
	chave2[17] = 1'b1;
end 
// chave2[ 16 ]
initial
begin
	chave2[16] = 1'b1;
end 
// chave2[ 15 ]
initial
begin
	chave2[15] = 1'b0;
end 
// chave2[ 14 ]
initial
begin
	chave2[14] = 1'b0;
end 
// chave2[ 13 ]
initial
begin
	chave2[13] = 1'b0;
end 
// chave2[ 12 ]
initial
begin
	chave2[12] = 1'b0;
	chave2[12] = #630000 1'b1;
end 
// chave2[ 11 ]
initial
begin
	chave2[11] = 1'b0;
	chave2[11] = #210000 1'b1;
	chave2[11] = #420000 1'b0;
end 
// chave2[ 10 ]
initial
begin
	repeat(2)
	begin
		chave2[10] = 1'b1;
		chave2[10] = #210000 1'b0;
		# 210000;
	end
	chave2[10] = 1'b1;
end 
// chave2[ 9 ]
initial
begin
	repeat(4)
	begin
		chave2[9] = 1'b0;
		chave2[9] = #110000 1'b1;
		# 100000;
	end
	chave2[9] = 1'b0;
	chave2[9] = #100000 1'b1;
end 
// chave2[ 8 ]
initial
begin
	repeat(2)
	begin
		chave2[8] = 1'b0;
		chave2[8] = #60000 1'b1;
		chave2[8] = #50000 1'b0;
		chave2[8] = #50000 1'b1;
		# 50000;
	end
	repeat(2)
	begin
		chave2[8] = 1'b0;
		chave2[8] = #50000 1'b1;
		chave2[8] = #60000 1'b0;
		chave2[8] = #50000 1'b1;
		# 50000;
	end
	chave2[8] = 1'b0;
	chave2[8] = #50000 1'b1;
	chave2[8] = #50000 1'b0;
end 
// chave2[ 7 ]
initial
begin
	repeat(2)
	begin
		chave2[7] = 1'b0;
		# 30000;
		repeat(2)
		begin
			chave2[7] = 1'b1;
			chave2[7] = #30000 1'b0;
			# 20000;
		end
		chave2[7] = 1'b1;
		chave2[7] = #30000 1'b0;
		chave2[7] = #30000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		chave2[7] = 1'b0;
		chave2[7] = #30000 1'b1;
		chave2[7] = #20000 1'b0;
		# 30000;
		repeat(2)
		begin
			chave2[7] = 1'b1;
			chave2[7] = #30000 1'b0;
			# 20000;
		end
		chave2[7] = 1'b1;
		# 30000;
	end
	repeat(2)
	begin
		chave2[7] = 1'b0;
		chave2[7] = #30000 1'b1;
		# 20000;
	end
	chave2[7] = 1'b0;
	chave2[7] = #30000 1'b1;
end 
// chave2[ 6 ]
initial
begin
	chave2[6] = 1'b0;
	chave2[6] = #20000 1'b1;
	chave2[6] = #10000 1'b0;
	chave2[6] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		chave2[6] = 1'b0;
		chave2[6] = #10000 1'b1;
		chave2[6] = #10000 1'b0;
		chave2[6] = #20000 1'b1;
		# 10000;
	end
	chave2[6] = 1'b0;
	chave2[6] = #10000 1'b1;
	chave2[6] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		chave2[6] = 1'b1;
		chave2[6] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			chave2[6] = 1'b1;
			chave2[6] = #10000 1'b0;
			chave2[6] = #10000 1'b1;
			chave2[6] = #20000 1'b0;
			# 10000;
		end
	end
	chave2[6] = 1'b1;
	chave2[6] = #10000 1'b0;
	chave2[6] = #20000 1'b1;
	chave2[6] = #10000 1'b0;
	chave2[6] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		chave2[6] = 1'b0;
		chave2[6] = #10000 1'b1;
		chave2[6] = #10000 1'b0;
		chave2[6] = #20000 1'b1;
		# 10000;
	end
	chave2[6] = 1'b0;
	chave2[6] = #10000 1'b1;
	chave2[6] = #20000 1'b0;
	chave2[6] = #10000 1'b1;
	chave2[6] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		chave2[6] = 1'b1;
		chave2[6] = #10000 1'b0;
		chave2[6] = #10000 1'b1;
		chave2[6] = #20000 1'b0;
		# 10000;
	end
	chave2[6] = 1'b1;
	chave2[6] = #10000 1'b0;
	chave2[6] = #20000 1'b1;
	chave2[6] = #10000 1'b0;
	chave2[6] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		chave2[6] = 1'b0;
		chave2[6] = #10000 1'b1;
		chave2[6] = #10000 1'b0;
		chave2[6] = #20000 1'b1;
		# 10000;
	end
	chave2[6] = 1'b0;
	chave2[6] = #10000 1'b1;
end 
// chave2[ 5 ]
initial
begin
	chave2[5] = 1'b0;
	# 10000;
	repeat(2)
	begin
		chave2[5] = 1'b1;
		chave2[5] = #20000 1'b0;
		# 20000;
	end
	chave2[5] = 1'b1;
	# 30000;
	repeat(3)
	begin
		chave2[5] = 1'b0;
		chave2[5] = #20000 1'b1;
		# 20000;
	end
	chave2[5] = 1'b0;
	chave2[5] = #20000 1'b1;
	# 30000;
	repeat(3)
	begin
		chave2[5] = 1'b0;
		chave2[5] = #20000 1'b1;
		# 20000;
	end
	chave2[5] = 1'b0;
	# 30000;
	repeat(3)
	begin
		chave2[5] = 1'b1;
		chave2[5] = #20000 1'b0;
		# 20000;
	end
	chave2[5] = 1'b1;
	chave2[5] = #20000 1'b0;
	# 30000;
	repeat(3)
	begin
		chave2[5] = 1'b1;
		chave2[5] = #20000 1'b0;
		# 20000;
	end
	chave2[5] = 1'b1;
	# 30000;
	repeat(3)
	begin
		chave2[5] = 1'b0;
		chave2[5] = #20000 1'b1;
		# 20000;
	end
	chave2[5] = 1'b0;
	chave2[5] = #20000 1'b1;
	chave2[5] = #30000 1'b0;
	chave2[5] = #20000 1'b1;
	chave2[5] = #20000 1'b0;
	chave2[5] = #20000 1'b1;
end 
// chave2[ 4 ]
initial
begin
	repeat(5)
	begin
		chave2[4] = 1'b0;
		chave2[4] = #10000 1'b1;
		# 10000;
	end
	repeat(2)
	begin
		chave2[4] = 1'b0;
		# 20000;
		repeat(7)
		begin
			chave2[4] = 1'b1;
			chave2[4] = #10000 1'b0;
			# 10000;
		end
		chave2[4] = 1'b1;
		# 20000;
		repeat(7)
		begin
			chave2[4] = 1'b0;
			chave2[4] = #10000 1'b1;
			# 10000;
		end
	end
	chave2[4] = 1'b0;
	# 20000;
	repeat(7)
	begin
		chave2[4] = 1'b1;
		chave2[4] = #10000 1'b0;
		# 10000;
	end
	chave2[4] = 1'b1;
	# 20000;
	repeat(4)
	begin
		chave2[4] = 1'b0;
		chave2[4] = #10000 1'b1;
		# 10000;
	end
end 
// chave2[ 3 ]
initial
begin
	chave2[3] = 1'b0;
	# 30000;
	repeat(6)
	begin
		chave2[3] = 1'b1;
		chave2[3] = #80000 1'b0;
		# 80000;
	end
	chave2[3] = 1'b1;
end 
// chave2[ 2 ]
initial
begin
	chave2[2] = 1'b1;
	# 30000;
	repeat(12)
	begin
		chave2[2] = 1'b0;
		chave2[2] = #40000 1'b1;
		# 40000;
	end
	chave2[2] = 1'b0;
end 
// chave2[ 1 ]
initial
begin
	chave2[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		chave2[1] = 1'b1;
		chave2[1] = #20000 1'b0;
		# 20000;
	end
	chave2[1] = 1'b1;
	chave2[1] = #20000 1'b0;
end 
// chave2[ 0 ]
always
begin
	chave2[0] = 1'b1;
	chave2[0] = #10000 1'b0;
	#10000;
end 
// msg[ 63 ]
initial
begin
	msg[63] = 1'b0;
end 
// msg[ 62 ]
initial
begin
	msg[62] = 1'b0;
end 
// msg[ 61 ]
initial
begin
	msg[61] = 1'b0;
end 
// msg[ 60 ]
initial
begin
	msg[60] = 1'b0;
end 
// msg[ 59 ]
initial
begin
	msg[59] = 1'b0;
end 
// msg[ 58 ]
initial
begin
	msg[58] = 1'b0;
end 
// msg[ 57 ]
initial
begin
	msg[57] = 1'b0;
end 
// msg[ 56 ]
initial
begin
	msg[56] = 1'b0;
end 
// msg[ 55 ]
initial
begin
	msg[55] = 1'b0;
end 
// msg[ 54 ]
initial
begin
	msg[54] = 1'b0;
end 
// msg[ 53 ]
initial
begin
	msg[53] = 1'b0;
end 
// msg[ 52 ]
initial
begin
	msg[52] = 1'b0;
end 
// msg[ 51 ]
initial
begin
	msg[51] = 1'b0;
end 
// msg[ 50 ]
initial
begin
	msg[50] = 1'b0;
end 
// msg[ 49 ]
initial
begin
	msg[49] = 1'b0;
end 
// msg[ 48 ]
initial
begin
	msg[48] = 1'b1;
end 
// msg[ 47 ]
initial
begin
	msg[47] = 1'b0;
end 
// msg[ 46 ]
initial
begin
	msg[46] = 1'b0;
end 
// msg[ 45 ]
initial
begin
	msg[45] = 1'b0;
end 
// msg[ 44 ]
initial
begin
	msg[44] = 1'b0;
end 
// msg[ 43 ]
initial
begin
	msg[43] = 1'b0;
end 
// msg[ 42 ]
initial
begin
	msg[42] = 1'b0;
end 
// msg[ 41 ]
initial
begin
	msg[41] = 1'b1;
end 
// msg[ 40 ]
initial
begin
	msg[40] = 1'b0;
end 
// msg[ 39 ]
initial
begin
	msg[39] = 1'b0;
end 
// msg[ 38 ]
initial
begin
	msg[38] = 1'b0;
end 
// msg[ 37 ]
initial
begin
	msg[37] = 1'b0;
end 
// msg[ 36 ]
initial
begin
	msg[36] = 1'b0;
end 
// msg[ 35 ]
initial
begin
	msg[35] = 1'b0;
end 
// msg[ 34 ]
initial
begin
	msg[34] = 1'b0;
end 
// msg[ 33 ]
initial
begin
	msg[33] = 1'b1;
end 
// msg[ 32 ]
initial
begin
	msg[32] = 1'b1;
end 
// msg[ 31 ]
initial
begin
	msg[31] = 1'b0;
end 
// msg[ 30 ]
initial
begin
	msg[30] = 1'b0;
end 
// msg[ 29 ]
initial
begin
	msg[29] = 1'b0;
end 
// msg[ 28 ]
initial
begin
	msg[28] = 1'b0;
end 
// msg[ 27 ]
initial
begin
	msg[27] = 1'b0;
end 
// msg[ 26 ]
initial
begin
	msg[26] = 1'b1;
end 
// msg[ 25 ]
initial
begin
	msg[25] = 1'b0;
end 
// msg[ 24 ]
initial
begin
	msg[24] = 1'b0;
end 
// msg[ 23 ]
initial
begin
	msg[23] = 1'b0;
end 
// msg[ 22 ]
initial
begin
	msg[22] = 1'b0;
end 
// msg[ 21 ]
initial
begin
	msg[21] = 1'b0;
end 
// msg[ 20 ]
initial
begin
	msg[20] = 1'b0;
end 
// msg[ 19 ]
initial
begin
	msg[19] = 1'b0;
end 
// msg[ 18 ]
initial
begin
	msg[18] = 1'b1;
end 
// msg[ 17 ]
initial
begin
	msg[17] = 1'b0;
end 
// msg[ 16 ]
initial
begin
	msg[16] = 1'b1;
end 
// msg[ 15 ]
initial
begin
	msg[15] = 1'b0;
end 
// msg[ 14 ]
initial
begin
	msg[14] = 1'b0;
end 
// msg[ 13 ]
initial
begin
	msg[13] = 1'b0;
end 
// msg[ 12 ]
initial
begin
	msg[12] = 1'b0;
	msg[12] = #530000 1'b1;
end 
// msg[ 11 ]
initial
begin
	msg[11] = 1'b0;
	msg[11] = #110000 1'b1;
	msg[11] = #420000 1'b0;
	msg[11] = #410000 1'b1;
end 
// msg[ 10 ]
initial
begin
	msg[10] = 1'b1;
	msg[10] = #110000 1'b0;
	msg[10] = #210000 1'b1;
	msg[10] = #210000 1'b0;
	msg[10] = #200000 1'b1;
	msg[10] = #210000 1'b0;
end 
// msg[ 9 ]
initial
begin
	repeat(3)
	begin
		msg[9] = 1'b1;
		msg[9] = #110000 1'b0;
		# 100000;
	end
	msg[9] = 1'b1;
	msg[9] = #100000 1'b0;
	msg[9] = #110000 1'b1;
	msg[9] = #100000 1'b0;
end 
// msg[ 8 ]
initial
begin
	msg[8] = 1'b0;
	# 60000;
	repeat(2)
	begin
		msg[8] = 1'b1;
		msg[8] = #50000 1'b0;
		# 50000;
	end
	repeat(2)
	begin
		msg[8] = 1'b1;
		msg[8] = #60000 1'b0;
		msg[8] = #50000 1'b1;
		msg[8] = #50000 1'b0;
		# 50000;
	end
	msg[8] = 1'b1;
	msg[8] = #50000 1'b0;
	msg[8] = #60000 1'b1;
	msg[8] = #50000 1'b0;
	msg[8] = #50000 1'b1;
	msg[8] = #50000 1'b0;
end 
// msg[ 7 ]
initial
begin
	msg[7] = 1'b0;
	# 30000;
	repeat(2)
	begin
		msg[7] = 1'b1;
		msg[7] = #30000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		msg[7] = 1'b1;
		# 30000;
		repeat(2)
		begin
			msg[7] = 1'b0;
			msg[7] = #30000 1'b1;
			# 20000;
		end
		msg[7] = 1'b0;
		msg[7] = #30000 1'b1;
		msg[7] = #30000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		msg[7] = 1'b1;
		msg[7] = #30000 1'b0;
		msg[7] = #20000 1'b1;
		# 30000;
		repeat(2)
		begin
			msg[7] = 1'b0;
			msg[7] = #30000 1'b1;
			# 20000;
		end
		msg[7] = 1'b0;
		# 30000;
	end
	msg[7] = 1'b1;
end 
// msg[ 6 ]
initial
begin
	msg[6] = 1'b0;
	# 20000;
	repeat(2)
	begin
		msg[6] = 1'b1;
		msg[6] = #10000 1'b0;
		msg[6] = #10000 1'b1;
		msg[6] = #20000 1'b0;
		# 10000;
	end
	msg[6] = 1'b1;
	msg[6] = #10000 1'b0;
	msg[6] = #20000 1'b1;
	msg[6] = #10000 1'b0;
	msg[6] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		msg[6] = 1'b0;
		msg[6] = #10000 1'b1;
		msg[6] = #10000 1'b0;
		msg[6] = #20000 1'b1;
		# 10000;
	end
	msg[6] = 1'b0;
	msg[6] = #10000 1'b1;
	msg[6] = #20000 1'b0;
	msg[6] = #10000 1'b1;
	msg[6] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		msg[6] = 1'b1;
		msg[6] = #10000 1'b0;
		msg[6] = #10000 1'b1;
		msg[6] = #20000 1'b0;
		# 10000;
	end
	msg[6] = 1'b1;
	msg[6] = #10000 1'b0;
	msg[6] = #20000 1'b1;
	# 10000;
	repeat(2)
	begin
		msg[6] = 1'b0;
		msg[6] = #10000 1'b1;
		# 20000;
		repeat(2)
		begin
			msg[6] = 1'b0;
			msg[6] = #10000 1'b1;
			msg[6] = #10000 1'b0;
			msg[6] = #20000 1'b1;
			# 10000;
		end
	end
	msg[6] = 1'b0;
	msg[6] = #10000 1'b1;
	msg[6] = #20000 1'b0;
	msg[6] = #10000 1'b1;
	msg[6] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		msg[6] = 1'b1;
		msg[6] = #10000 1'b0;
		msg[6] = #10000 1'b1;
		msg[6] = #20000 1'b0;
		# 10000;
	end
	msg[6] = 1'b1;
	msg[6] = #10000 1'b0;
	msg[6] = #20000 1'b1;
	msg[6] = #10000 1'b0;
	msg[6] = #10000 1'b1;
end 
// msg[ 5 ]
initial
begin
	msg[5] = 1'b0;
	msg[5] = #10000 1'b1;
	msg[5] = #20000 1'b0;
	# 20000;
	repeat(2)
	begin
		msg[5] = 1'b1;
		msg[5] = #20000 1'b0;
		# 30000;
		repeat(3)
		begin
			msg[5] = 1'b1;
			msg[5] = #20000 1'b0;
			# 20000;
		end
	end
	msg[5] = 1'b1;
	# 30000;
	repeat(3)
	begin
		msg[5] = 1'b0;
		msg[5] = #20000 1'b1;
		# 20000;
	end
	msg[5] = 1'b0;
	msg[5] = #20000 1'b1;
	# 30000;
	repeat(3)
	begin
		msg[5] = 1'b0;
		msg[5] = #20000 1'b1;
		# 20000;
	end
	msg[5] = 1'b0;
	# 30000;
	repeat(3)
	begin
		msg[5] = 1'b1;
		msg[5] = #20000 1'b0;
		# 20000;
	end
	msg[5] = 1'b1;
	msg[5] = #20000 1'b0;
	# 30000;
	repeat(2)
	begin
		msg[5] = 1'b1;
		msg[5] = #20000 1'b0;
		# 20000;
	end
	msg[5] = 1'b1;
end 
// msg[ 4 ]
initial
begin
	repeat(4)
	begin
		msg[4] = 1'b0;
		msg[4] = #10000 1'b1;
		# 10000;
	end
	repeat(2)
	begin
		msg[4] = 1'b0;
		# 20000;
		repeat(7)
		begin
			msg[4] = 1'b1;
			msg[4] = #10000 1'b0;
			# 10000;
		end
		msg[4] = 1'b1;
		# 20000;
		repeat(7)
		begin
			msg[4] = 1'b0;
			msg[4] = #10000 1'b1;
			# 10000;
		end
	end
	msg[4] = 1'b0;
	# 20000;
	repeat(7)
	begin
		msg[4] = 1'b1;
		msg[4] = #10000 1'b0;
		# 10000;
	end
	msg[4] = 1'b1;
	# 20000;
	repeat(5)
	begin
		msg[4] = 1'b0;
		msg[4] = #10000 1'b1;
		# 10000;
	end
end 
// msg[ 3 ]
initial
begin
	msg[3] = 1'b0;
	# 10000;
	repeat(6)
	begin
		msg[3] = 1'b1;
		msg[3] = #80000 1'b0;
		# 80000;
	end
	msg[3] = 1'b1;
end 
// msg[ 2 ]
initial
begin
	msg[2] = 1'b1;
	# 10000;
	repeat(12)
	begin
		msg[2] = 1'b0;
		msg[2] = #40000 1'b1;
		# 40000;
	end
	msg[2] = 1'b0;
end 
// msg[ 1 ]
initial
begin
	msg[1] = 1'b1;
	# 10000;
	repeat(24)
	begin
		msg[1] = 1'b0;
		msg[1] = #20000 1'b1;
		# 20000;
	end
	msg[1] = 1'b0;
	msg[1] = #20000 1'b1;
end 
// msg[ 0 ]
always
begin
	msg[0] = 1'b1;
	msg[0] = #10000 1'b0;
	#10000;
end 

aes_vlg_sample_tst tb_sample (
	.chave1(chave1),
	.chave2(chave2),
	.msg(msg),
	.sampler_tx(sampler)
);

aes_vlg_check_tst tb_out(
	.mensagem_criptografada(mensagem_criptografada),
	.sampler_rx(sampler)
);
endmodule

