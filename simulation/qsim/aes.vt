// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2019 20:55:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    aes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module aes_vlg_sample_tst(
	clk,
	key,
	msg,
	reset,
	sampler_tx
);
input  clk;
input [0:127] key;
input [0:127] msg;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or key or msg or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module aes_vlg_check_tst (
	mensagem_criptografada,
	state_view,
	sampler_rx
);
input [0:127] mensagem_criptografada;
input [2:0] state_view;
input sampler_rx;

reg [0:127] mensagem_criptografada_expected;
reg [2:0] state_view_expected;

reg [0:127] mensagem_criptografada_prev;
reg [2:0] state_view_prev;

reg [0:127] mensagem_criptografada_expected_prev;
reg [2:0] state_view_expected_prev;

reg [0:127] last_mensagem_criptografada_exp;
reg [2:0] last_state_view_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	mensagem_criptografada_prev = mensagem_criptografada;
	state_view_prev = state_view;
end

// update expected /o prevs

always @(trigger)
begin
	mensagem_criptografada_expected_prev = mensagem_criptografada_expected;
	state_view_expected_prev = state_view_expected;
end


// expected mensagem_criptografada[ 127 ]
initial
begin
	mensagem_criptografada_expected[127] = 1'bX;
end 
// expected mensagem_criptografada[ 126 ]
initial
begin
	mensagem_criptografada_expected[126] = 1'bX;
end 
// expected mensagem_criptografada[ 125 ]
initial
begin
	mensagem_criptografada_expected[125] = 1'bX;
end 
// expected mensagem_criptografada[ 124 ]
initial
begin
	mensagem_criptografada_expected[124] = 1'bX;
end 
// expected mensagem_criptografada[ 123 ]
initial
begin
	mensagem_criptografada_expected[123] = 1'bX;
end 
// expected mensagem_criptografada[ 122 ]
initial
begin
	mensagem_criptografada_expected[122] = 1'bX;
end 
// expected mensagem_criptografada[ 121 ]
initial
begin
	mensagem_criptografada_expected[121] = 1'bX;
end 
// expected mensagem_criptografada[ 120 ]
initial
begin
	mensagem_criptografada_expected[120] = 1'bX;
end 
// expected mensagem_criptografada[ 119 ]
initial
begin
	mensagem_criptografada_expected[119] = 1'bX;
end 
// expected mensagem_criptografada[ 118 ]
initial
begin
	mensagem_criptografada_expected[118] = 1'bX;
end 
// expected mensagem_criptografada[ 117 ]
initial
begin
	mensagem_criptografada_expected[117] = 1'bX;
end 
// expected mensagem_criptografada[ 116 ]
initial
begin
	mensagem_criptografada_expected[116] = 1'bX;
end 
// expected mensagem_criptografada[ 115 ]
initial
begin
	mensagem_criptografada_expected[115] = 1'bX;
end 
// expected mensagem_criptografada[ 114 ]
initial
begin
	mensagem_criptografada_expected[114] = 1'bX;
end 
// expected mensagem_criptografada[ 113 ]
initial
begin
	mensagem_criptografada_expected[113] = 1'bX;
end 
// expected mensagem_criptografada[ 112 ]
initial
begin
	mensagem_criptografada_expected[112] = 1'bX;
end 
// expected mensagem_criptografada[ 111 ]
initial
begin
	mensagem_criptografada_expected[111] = 1'bX;
end 
// expected mensagem_criptografada[ 110 ]
initial
begin
	mensagem_criptografada_expected[110] = 1'bX;
end 
// expected mensagem_criptografada[ 109 ]
initial
begin
	mensagem_criptografada_expected[109] = 1'bX;
end 
// expected mensagem_criptografada[ 108 ]
initial
begin
	mensagem_criptografada_expected[108] = 1'bX;
end 
// expected mensagem_criptografada[ 107 ]
initial
begin
	mensagem_criptografada_expected[107] = 1'bX;
end 
// expected mensagem_criptografada[ 106 ]
initial
begin
	mensagem_criptografada_expected[106] = 1'bX;
end 
// expected mensagem_criptografada[ 105 ]
initial
begin
	mensagem_criptografada_expected[105] = 1'bX;
end 
// expected mensagem_criptografada[ 104 ]
initial
begin
	mensagem_criptografada_expected[104] = 1'bX;
end 
// expected mensagem_criptografada[ 103 ]
initial
begin
	mensagem_criptografada_expected[103] = 1'bX;
end 
// expected mensagem_criptografada[ 102 ]
initial
begin
	mensagem_criptografada_expected[102] = 1'bX;
end 
// expected mensagem_criptografada[ 101 ]
initial
begin
	mensagem_criptografada_expected[101] = 1'bX;
end 
// expected mensagem_criptografada[ 100 ]
initial
begin
	mensagem_criptografada_expected[100] = 1'bX;
end 
// expected mensagem_criptografada[ 99 ]
initial
begin
	mensagem_criptografada_expected[99] = 1'bX;
end 
// expected mensagem_criptografada[ 98 ]
initial
begin
	mensagem_criptografada_expected[98] = 1'bX;
end 
// expected mensagem_criptografada[ 97 ]
initial
begin
	mensagem_criptografada_expected[97] = 1'bX;
end 
// expected mensagem_criptografada[ 96 ]
initial
begin
	mensagem_criptografada_expected[96] = 1'bX;
end 
// expected mensagem_criptografada[ 95 ]
initial
begin
	mensagem_criptografada_expected[95] = 1'bX;
end 
// expected mensagem_criptografada[ 94 ]
initial
begin
	mensagem_criptografada_expected[94] = 1'bX;
end 
// expected mensagem_criptografada[ 93 ]
initial
begin
	mensagem_criptografada_expected[93] = 1'bX;
end 
// expected mensagem_criptografada[ 92 ]
initial
begin
	mensagem_criptografada_expected[92] = 1'bX;
end 
// expected mensagem_criptografada[ 91 ]
initial
begin
	mensagem_criptografada_expected[91] = 1'bX;
end 
// expected mensagem_criptografada[ 90 ]
initial
begin
	mensagem_criptografada_expected[90] = 1'bX;
end 
// expected mensagem_criptografada[ 89 ]
initial
begin
	mensagem_criptografada_expected[89] = 1'bX;
end 
// expected mensagem_criptografada[ 88 ]
initial
begin
	mensagem_criptografada_expected[88] = 1'bX;
end 
// expected mensagem_criptografada[ 87 ]
initial
begin
	mensagem_criptografada_expected[87] = 1'bX;
end 
// expected mensagem_criptografada[ 86 ]
initial
begin
	mensagem_criptografada_expected[86] = 1'bX;
end 
// expected mensagem_criptografada[ 85 ]
initial
begin
	mensagem_criptografada_expected[85] = 1'bX;
end 
// expected mensagem_criptografada[ 84 ]
initial
begin
	mensagem_criptografada_expected[84] = 1'bX;
end 
// expected mensagem_criptografada[ 83 ]
initial
begin
	mensagem_criptografada_expected[83] = 1'bX;
end 
// expected mensagem_criptografada[ 82 ]
initial
begin
	mensagem_criptografada_expected[82] = 1'bX;
end 
// expected mensagem_criptografada[ 81 ]
initial
begin
	mensagem_criptografada_expected[81] = 1'bX;
end 
// expected mensagem_criptografada[ 80 ]
initial
begin
	mensagem_criptografada_expected[80] = 1'bX;
end 
// expected mensagem_criptografada[ 79 ]
initial
begin
	mensagem_criptografada_expected[79] = 1'bX;
end 
// expected mensagem_criptografada[ 78 ]
initial
begin
	mensagem_criptografada_expected[78] = 1'bX;
end 
// expected mensagem_criptografada[ 77 ]
initial
begin
	mensagem_criptografada_expected[77] = 1'bX;
end 
// expected mensagem_criptografada[ 76 ]
initial
begin
	mensagem_criptografada_expected[76] = 1'bX;
end 
// expected mensagem_criptografada[ 75 ]
initial
begin
	mensagem_criptografada_expected[75] = 1'bX;
end 
// expected mensagem_criptografada[ 74 ]
initial
begin
	mensagem_criptografada_expected[74] = 1'bX;
end 
// expected mensagem_criptografada[ 73 ]
initial
begin
	mensagem_criptografada_expected[73] = 1'bX;
end 
// expected mensagem_criptografada[ 72 ]
initial
begin
	mensagem_criptografada_expected[72] = 1'bX;
end 
// expected mensagem_criptografada[ 71 ]
initial
begin
	mensagem_criptografada_expected[71] = 1'bX;
end 
// expected mensagem_criptografada[ 70 ]
initial
begin
	mensagem_criptografada_expected[70] = 1'bX;
end 
// expected mensagem_criptografada[ 69 ]
initial
begin
	mensagem_criptografada_expected[69] = 1'bX;
end 
// expected mensagem_criptografada[ 68 ]
initial
begin
	mensagem_criptografada_expected[68] = 1'bX;
end 
// expected mensagem_criptografada[ 67 ]
initial
begin
	mensagem_criptografada_expected[67] = 1'bX;
end 
// expected mensagem_criptografada[ 66 ]
initial
begin
	mensagem_criptografada_expected[66] = 1'bX;
end 
// expected mensagem_criptografada[ 65 ]
initial
begin
	mensagem_criptografada_expected[65] = 1'bX;
end 
// expected mensagem_criptografada[ 64 ]
initial
begin
	mensagem_criptografada_expected[64] = 1'bX;
end 
// expected mensagem_criptografada[ 63 ]
initial
begin
	mensagem_criptografada_expected[63] = 1'bX;
end 
// expected mensagem_criptografada[ 62 ]
initial
begin
	mensagem_criptografada_expected[62] = 1'bX;
end 
// expected mensagem_criptografada[ 61 ]
initial
begin
	mensagem_criptografada_expected[61] = 1'bX;
end 
// expected mensagem_criptografada[ 60 ]
initial
begin
	mensagem_criptografada_expected[60] = 1'bX;
end 
// expected mensagem_criptografada[ 59 ]
initial
begin
	mensagem_criptografada_expected[59] = 1'bX;
end 
// expected mensagem_criptografada[ 58 ]
initial
begin
	mensagem_criptografada_expected[58] = 1'bX;
end 
// expected mensagem_criptografada[ 57 ]
initial
begin
	mensagem_criptografada_expected[57] = 1'bX;
end 
// expected mensagem_criptografada[ 56 ]
initial
begin
	mensagem_criptografada_expected[56] = 1'bX;
end 
// expected mensagem_criptografada[ 55 ]
initial
begin
	mensagem_criptografada_expected[55] = 1'bX;
end 
// expected mensagem_criptografada[ 54 ]
initial
begin
	mensagem_criptografada_expected[54] = 1'bX;
end 
// expected mensagem_criptografada[ 53 ]
initial
begin
	mensagem_criptografada_expected[53] = 1'bX;
end 
// expected mensagem_criptografada[ 52 ]
initial
begin
	mensagem_criptografada_expected[52] = 1'bX;
end 
// expected mensagem_criptografada[ 51 ]
initial
begin
	mensagem_criptografada_expected[51] = 1'bX;
end 
// expected mensagem_criptografada[ 50 ]
initial
begin
	mensagem_criptografada_expected[50] = 1'bX;
end 
// expected mensagem_criptografada[ 49 ]
initial
begin
	mensagem_criptografada_expected[49] = 1'bX;
end 
// expected mensagem_criptografada[ 48 ]
initial
begin
	mensagem_criptografada_expected[48] = 1'bX;
end 
// expected mensagem_criptografada[ 47 ]
initial
begin
	mensagem_criptografada_expected[47] = 1'bX;
end 
// expected mensagem_criptografada[ 46 ]
initial
begin
	mensagem_criptografada_expected[46] = 1'bX;
end 
// expected mensagem_criptografada[ 45 ]
initial
begin
	mensagem_criptografada_expected[45] = 1'bX;
end 
// expected mensagem_criptografada[ 44 ]
initial
begin
	mensagem_criptografada_expected[44] = 1'bX;
end 
// expected mensagem_criptografada[ 43 ]
initial
begin
	mensagem_criptografada_expected[43] = 1'bX;
end 
// expected mensagem_criptografada[ 42 ]
initial
begin
	mensagem_criptografada_expected[42] = 1'bX;
end 
// expected mensagem_criptografada[ 41 ]
initial
begin
	mensagem_criptografada_expected[41] = 1'bX;
end 
// expected mensagem_criptografada[ 40 ]
initial
begin
	mensagem_criptografada_expected[40] = 1'bX;
end 
// expected mensagem_criptografada[ 39 ]
initial
begin
	mensagem_criptografada_expected[39] = 1'bX;
end 
// expected mensagem_criptografada[ 38 ]
initial
begin
	mensagem_criptografada_expected[38] = 1'bX;
end 
// expected mensagem_criptografada[ 37 ]
initial
begin
	mensagem_criptografada_expected[37] = 1'bX;
end 
// expected mensagem_criptografada[ 36 ]
initial
begin
	mensagem_criptografada_expected[36] = 1'bX;
end 
// expected mensagem_criptografada[ 35 ]
initial
begin
	mensagem_criptografada_expected[35] = 1'bX;
end 
// expected mensagem_criptografada[ 34 ]
initial
begin
	mensagem_criptografada_expected[34] = 1'bX;
end 
// expected mensagem_criptografada[ 33 ]
initial
begin
	mensagem_criptografada_expected[33] = 1'bX;
end 
// expected mensagem_criptografada[ 32 ]
initial
begin
	mensagem_criptografada_expected[32] = 1'bX;
end 
// expected mensagem_criptografada[ 31 ]
initial
begin
	mensagem_criptografada_expected[31] = 1'bX;
end 
// expected mensagem_criptografada[ 30 ]
initial
begin
	mensagem_criptografada_expected[30] = 1'bX;
end 
// expected mensagem_criptografada[ 29 ]
initial
begin
	mensagem_criptografada_expected[29] = 1'bX;
end 
// expected mensagem_criptografada[ 28 ]
initial
begin
	mensagem_criptografada_expected[28] = 1'bX;
end 
// expected mensagem_criptografada[ 27 ]
initial
begin
	mensagem_criptografada_expected[27] = 1'bX;
end 
// expected mensagem_criptografada[ 26 ]
initial
begin
	mensagem_criptografada_expected[26] = 1'bX;
end 
// expected mensagem_criptografada[ 25 ]
initial
begin
	mensagem_criptografada_expected[25] = 1'bX;
end 
// expected mensagem_criptografada[ 24 ]
initial
begin
	mensagem_criptografada_expected[24] = 1'bX;
end 
// expected mensagem_criptografada[ 23 ]
initial
begin
	mensagem_criptografada_expected[23] = 1'bX;
end 
// expected mensagem_criptografada[ 22 ]
initial
begin
	mensagem_criptografada_expected[22] = 1'bX;
end 
// expected mensagem_criptografada[ 21 ]
initial
begin
	mensagem_criptografada_expected[21] = 1'bX;
end 
// expected mensagem_criptografada[ 20 ]
initial
begin
	mensagem_criptografada_expected[20] = 1'bX;
end 
// expected mensagem_criptografada[ 19 ]
initial
begin
	mensagem_criptografada_expected[19] = 1'bX;
end 
// expected mensagem_criptografada[ 18 ]
initial
begin
	mensagem_criptografada_expected[18] = 1'bX;
end 
// expected mensagem_criptografada[ 17 ]
initial
begin
	mensagem_criptografada_expected[17] = 1'bX;
end 
// expected mensagem_criptografada[ 16 ]
initial
begin
	mensagem_criptografada_expected[16] = 1'bX;
end 
// expected mensagem_criptografada[ 15 ]
initial
begin
	mensagem_criptografada_expected[15] = 1'bX;
end 
// expected mensagem_criptografada[ 14 ]
initial
begin
	mensagem_criptografada_expected[14] = 1'bX;
end 
// expected mensagem_criptografada[ 13 ]
initial
begin
	mensagem_criptografada_expected[13] = 1'bX;
end 
// expected mensagem_criptografada[ 12 ]
initial
begin
	mensagem_criptografada_expected[12] = 1'bX;
end 
// expected mensagem_criptografada[ 11 ]
initial
begin
	mensagem_criptografada_expected[11] = 1'bX;
end 
// expected mensagem_criptografada[ 10 ]
initial
begin
	mensagem_criptografada_expected[10] = 1'bX;
end 
// expected mensagem_criptografada[ 9 ]
initial
begin
	mensagem_criptografada_expected[9] = 1'bX;
end 
// expected mensagem_criptografada[ 8 ]
initial
begin
	mensagem_criptografada_expected[8] = 1'bX;
end 
// expected mensagem_criptografada[ 7 ]
initial
begin
	mensagem_criptografada_expected[7] = 1'bX;
end 
// expected mensagem_criptografada[ 6 ]
initial
begin
	mensagem_criptografada_expected[6] = 1'bX;
end 
// expected mensagem_criptografada[ 5 ]
initial
begin
	mensagem_criptografada_expected[5] = 1'bX;
end 
// expected mensagem_criptografada[ 4 ]
initial
begin
	mensagem_criptografada_expected[4] = 1'bX;
end 
// expected mensagem_criptografada[ 3 ]
initial
begin
	mensagem_criptografada_expected[3] = 1'bX;
end 
// expected mensagem_criptografada[ 2 ]
initial
begin
	mensagem_criptografada_expected[2] = 1'bX;
end 
// expected mensagem_criptografada[ 1 ]
initial
begin
	mensagem_criptografada_expected[1] = 1'bX;
end 
// expected mensagem_criptografada[ 0 ]
initial
begin
	mensagem_criptografada_expected[0] = 1'bX;
end 
// expected state_view[ 2 ]
initial
begin
	state_view_expected[2] = 1'bX;
end 
// expected state_view[ 1 ]
initial
begin
	state_view_expected[1] = 1'bX;
end 
// expected state_view[ 0 ]
initial
begin
	state_view_expected[0] = 1'bX;
end 
// generate trigger
always @(mensagem_criptografada_expected or mensagem_criptografada or state_view_expected or state_view)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mensagem_criptografada = %b | expected state_view = %b | ",mensagem_criptografada_expected_prev,state_view_expected_prev);
	$display("| real mensagem_criptografada = %b | real state_view = %b | ",mensagem_criptografada_prev,state_view_prev);
`endif
	if (
		( mensagem_criptografada_expected_prev[0] !== 1'bx ) && ( mensagem_criptografada_prev[0] !== mensagem_criptografada_expected_prev[0] )
		&& ((mensagem_criptografada_expected_prev[0] !== last_mensagem_criptografada_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[0] = mensagem_criptografada_expected_prev[0];
	end
	if (
		( mensagem_criptografada_expected_prev[1] !== 1'bx ) && ( mensagem_criptografada_prev[1] !== mensagem_criptografada_expected_prev[1] )
		&& ((mensagem_criptografada_expected_prev[1] !== last_mensagem_criptografada_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[1] = mensagem_criptografada_expected_prev[1];
	end
	if (
		( mensagem_criptografada_expected_prev[2] !== 1'bx ) && ( mensagem_criptografada_prev[2] !== mensagem_criptografada_expected_prev[2] )
		&& ((mensagem_criptografada_expected_prev[2] !== last_mensagem_criptografada_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[2] = mensagem_criptografada_expected_prev[2];
	end
	if (
		( mensagem_criptografada_expected_prev[3] !== 1'bx ) && ( mensagem_criptografada_prev[3] !== mensagem_criptografada_expected_prev[3] )
		&& ((mensagem_criptografada_expected_prev[3] !== last_mensagem_criptografada_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[3] = mensagem_criptografada_expected_prev[3];
	end
	if (
		( mensagem_criptografada_expected_prev[4] !== 1'bx ) && ( mensagem_criptografada_prev[4] !== mensagem_criptografada_expected_prev[4] )
		&& ((mensagem_criptografada_expected_prev[4] !== last_mensagem_criptografada_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[4] = mensagem_criptografada_expected_prev[4];
	end
	if (
		( mensagem_criptografada_expected_prev[5] !== 1'bx ) && ( mensagem_criptografada_prev[5] !== mensagem_criptografada_expected_prev[5] )
		&& ((mensagem_criptografada_expected_prev[5] !== last_mensagem_criptografada_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[5] = mensagem_criptografada_expected_prev[5];
	end
	if (
		( mensagem_criptografada_expected_prev[6] !== 1'bx ) && ( mensagem_criptografada_prev[6] !== mensagem_criptografada_expected_prev[6] )
		&& ((mensagem_criptografada_expected_prev[6] !== last_mensagem_criptografada_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[6] = mensagem_criptografada_expected_prev[6];
	end
	if (
		( mensagem_criptografada_expected_prev[7] !== 1'bx ) && ( mensagem_criptografada_prev[7] !== mensagem_criptografada_expected_prev[7] )
		&& ((mensagem_criptografada_expected_prev[7] !== last_mensagem_criptografada_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[7] = mensagem_criptografada_expected_prev[7];
	end
	if (
		( mensagem_criptografada_expected_prev[8] !== 1'bx ) && ( mensagem_criptografada_prev[8] !== mensagem_criptografada_expected_prev[8] )
		&& ((mensagem_criptografada_expected_prev[8] !== last_mensagem_criptografada_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[8] = mensagem_criptografada_expected_prev[8];
	end
	if (
		( mensagem_criptografada_expected_prev[9] !== 1'bx ) && ( mensagem_criptografada_prev[9] !== mensagem_criptografada_expected_prev[9] )
		&& ((mensagem_criptografada_expected_prev[9] !== last_mensagem_criptografada_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[9] = mensagem_criptografada_expected_prev[9];
	end
	if (
		( mensagem_criptografada_expected_prev[10] !== 1'bx ) && ( mensagem_criptografada_prev[10] !== mensagem_criptografada_expected_prev[10] )
		&& ((mensagem_criptografada_expected_prev[10] !== last_mensagem_criptografada_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[10] = mensagem_criptografada_expected_prev[10];
	end
	if (
		( mensagem_criptografada_expected_prev[11] !== 1'bx ) && ( mensagem_criptografada_prev[11] !== mensagem_criptografada_expected_prev[11] )
		&& ((mensagem_criptografada_expected_prev[11] !== last_mensagem_criptografada_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[11] = mensagem_criptografada_expected_prev[11];
	end
	if (
		( mensagem_criptografada_expected_prev[12] !== 1'bx ) && ( mensagem_criptografada_prev[12] !== mensagem_criptografada_expected_prev[12] )
		&& ((mensagem_criptografada_expected_prev[12] !== last_mensagem_criptografada_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[12] = mensagem_criptografada_expected_prev[12];
	end
	if (
		( mensagem_criptografada_expected_prev[13] !== 1'bx ) && ( mensagem_criptografada_prev[13] !== mensagem_criptografada_expected_prev[13] )
		&& ((mensagem_criptografada_expected_prev[13] !== last_mensagem_criptografada_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[13] = mensagem_criptografada_expected_prev[13];
	end
	if (
		( mensagem_criptografada_expected_prev[14] !== 1'bx ) && ( mensagem_criptografada_prev[14] !== mensagem_criptografada_expected_prev[14] )
		&& ((mensagem_criptografada_expected_prev[14] !== last_mensagem_criptografada_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[14] = mensagem_criptografada_expected_prev[14];
	end
	if (
		( mensagem_criptografada_expected_prev[15] !== 1'bx ) && ( mensagem_criptografada_prev[15] !== mensagem_criptografada_expected_prev[15] )
		&& ((mensagem_criptografada_expected_prev[15] !== last_mensagem_criptografada_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[15] = mensagem_criptografada_expected_prev[15];
	end
	if (
		( mensagem_criptografada_expected_prev[16] !== 1'bx ) && ( mensagem_criptografada_prev[16] !== mensagem_criptografada_expected_prev[16] )
		&& ((mensagem_criptografada_expected_prev[16] !== last_mensagem_criptografada_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[16] = mensagem_criptografada_expected_prev[16];
	end
	if (
		( mensagem_criptografada_expected_prev[17] !== 1'bx ) && ( mensagem_criptografada_prev[17] !== mensagem_criptografada_expected_prev[17] )
		&& ((mensagem_criptografada_expected_prev[17] !== last_mensagem_criptografada_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[17] = mensagem_criptografada_expected_prev[17];
	end
	if (
		( mensagem_criptografada_expected_prev[18] !== 1'bx ) && ( mensagem_criptografada_prev[18] !== mensagem_criptografada_expected_prev[18] )
		&& ((mensagem_criptografada_expected_prev[18] !== last_mensagem_criptografada_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[18] = mensagem_criptografada_expected_prev[18];
	end
	if (
		( mensagem_criptografada_expected_prev[19] !== 1'bx ) && ( mensagem_criptografada_prev[19] !== mensagem_criptografada_expected_prev[19] )
		&& ((mensagem_criptografada_expected_prev[19] !== last_mensagem_criptografada_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[19] = mensagem_criptografada_expected_prev[19];
	end
	if (
		( mensagem_criptografada_expected_prev[20] !== 1'bx ) && ( mensagem_criptografada_prev[20] !== mensagem_criptografada_expected_prev[20] )
		&& ((mensagem_criptografada_expected_prev[20] !== last_mensagem_criptografada_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[20] = mensagem_criptografada_expected_prev[20];
	end
	if (
		( mensagem_criptografada_expected_prev[21] !== 1'bx ) && ( mensagem_criptografada_prev[21] !== mensagem_criptografada_expected_prev[21] )
		&& ((mensagem_criptografada_expected_prev[21] !== last_mensagem_criptografada_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[21] = mensagem_criptografada_expected_prev[21];
	end
	if (
		( mensagem_criptografada_expected_prev[22] !== 1'bx ) && ( mensagem_criptografada_prev[22] !== mensagem_criptografada_expected_prev[22] )
		&& ((mensagem_criptografada_expected_prev[22] !== last_mensagem_criptografada_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[22] = mensagem_criptografada_expected_prev[22];
	end
	if (
		( mensagem_criptografada_expected_prev[23] !== 1'bx ) && ( mensagem_criptografada_prev[23] !== mensagem_criptografada_expected_prev[23] )
		&& ((mensagem_criptografada_expected_prev[23] !== last_mensagem_criptografada_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[23] = mensagem_criptografada_expected_prev[23];
	end
	if (
		( mensagem_criptografada_expected_prev[24] !== 1'bx ) && ( mensagem_criptografada_prev[24] !== mensagem_criptografada_expected_prev[24] )
		&& ((mensagem_criptografada_expected_prev[24] !== last_mensagem_criptografada_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[24] = mensagem_criptografada_expected_prev[24];
	end
	if (
		( mensagem_criptografada_expected_prev[25] !== 1'bx ) && ( mensagem_criptografada_prev[25] !== mensagem_criptografada_expected_prev[25] )
		&& ((mensagem_criptografada_expected_prev[25] !== last_mensagem_criptografada_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[25] = mensagem_criptografada_expected_prev[25];
	end
	if (
		( mensagem_criptografada_expected_prev[26] !== 1'bx ) && ( mensagem_criptografada_prev[26] !== mensagem_criptografada_expected_prev[26] )
		&& ((mensagem_criptografada_expected_prev[26] !== last_mensagem_criptografada_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[26] = mensagem_criptografada_expected_prev[26];
	end
	if (
		( mensagem_criptografada_expected_prev[27] !== 1'bx ) && ( mensagem_criptografada_prev[27] !== mensagem_criptografada_expected_prev[27] )
		&& ((mensagem_criptografada_expected_prev[27] !== last_mensagem_criptografada_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[27] = mensagem_criptografada_expected_prev[27];
	end
	if (
		( mensagem_criptografada_expected_prev[28] !== 1'bx ) && ( mensagem_criptografada_prev[28] !== mensagem_criptografada_expected_prev[28] )
		&& ((mensagem_criptografada_expected_prev[28] !== last_mensagem_criptografada_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[28] = mensagem_criptografada_expected_prev[28];
	end
	if (
		( mensagem_criptografada_expected_prev[29] !== 1'bx ) && ( mensagem_criptografada_prev[29] !== mensagem_criptografada_expected_prev[29] )
		&& ((mensagem_criptografada_expected_prev[29] !== last_mensagem_criptografada_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[29] = mensagem_criptografada_expected_prev[29];
	end
	if (
		( mensagem_criptografada_expected_prev[30] !== 1'bx ) && ( mensagem_criptografada_prev[30] !== mensagem_criptografada_expected_prev[30] )
		&& ((mensagem_criptografada_expected_prev[30] !== last_mensagem_criptografada_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[30] = mensagem_criptografada_expected_prev[30];
	end
	if (
		( mensagem_criptografada_expected_prev[31] !== 1'bx ) && ( mensagem_criptografada_prev[31] !== mensagem_criptografada_expected_prev[31] )
		&& ((mensagem_criptografada_expected_prev[31] !== last_mensagem_criptografada_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[31] = mensagem_criptografada_expected_prev[31];
	end
	if (
		( mensagem_criptografada_expected_prev[32] !== 1'bx ) && ( mensagem_criptografada_prev[32] !== mensagem_criptografada_expected_prev[32] )
		&& ((mensagem_criptografada_expected_prev[32] !== last_mensagem_criptografada_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[32] = mensagem_criptografada_expected_prev[32];
	end
	if (
		( mensagem_criptografada_expected_prev[33] !== 1'bx ) && ( mensagem_criptografada_prev[33] !== mensagem_criptografada_expected_prev[33] )
		&& ((mensagem_criptografada_expected_prev[33] !== last_mensagem_criptografada_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[33] = mensagem_criptografada_expected_prev[33];
	end
	if (
		( mensagem_criptografada_expected_prev[34] !== 1'bx ) && ( mensagem_criptografada_prev[34] !== mensagem_criptografada_expected_prev[34] )
		&& ((mensagem_criptografada_expected_prev[34] !== last_mensagem_criptografada_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[34] = mensagem_criptografada_expected_prev[34];
	end
	if (
		( mensagem_criptografada_expected_prev[35] !== 1'bx ) && ( mensagem_criptografada_prev[35] !== mensagem_criptografada_expected_prev[35] )
		&& ((mensagem_criptografada_expected_prev[35] !== last_mensagem_criptografada_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[35] = mensagem_criptografada_expected_prev[35];
	end
	if (
		( mensagem_criptografada_expected_prev[36] !== 1'bx ) && ( mensagem_criptografada_prev[36] !== mensagem_criptografada_expected_prev[36] )
		&& ((mensagem_criptografada_expected_prev[36] !== last_mensagem_criptografada_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[36] = mensagem_criptografada_expected_prev[36];
	end
	if (
		( mensagem_criptografada_expected_prev[37] !== 1'bx ) && ( mensagem_criptografada_prev[37] !== mensagem_criptografada_expected_prev[37] )
		&& ((mensagem_criptografada_expected_prev[37] !== last_mensagem_criptografada_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[37] = mensagem_criptografada_expected_prev[37];
	end
	if (
		( mensagem_criptografada_expected_prev[38] !== 1'bx ) && ( mensagem_criptografada_prev[38] !== mensagem_criptografada_expected_prev[38] )
		&& ((mensagem_criptografada_expected_prev[38] !== last_mensagem_criptografada_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[38] = mensagem_criptografada_expected_prev[38];
	end
	if (
		( mensagem_criptografada_expected_prev[39] !== 1'bx ) && ( mensagem_criptografada_prev[39] !== mensagem_criptografada_expected_prev[39] )
		&& ((mensagem_criptografada_expected_prev[39] !== last_mensagem_criptografada_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[39] = mensagem_criptografada_expected_prev[39];
	end
	if (
		( mensagem_criptografada_expected_prev[40] !== 1'bx ) && ( mensagem_criptografada_prev[40] !== mensagem_criptografada_expected_prev[40] )
		&& ((mensagem_criptografada_expected_prev[40] !== last_mensagem_criptografada_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[40] = mensagem_criptografada_expected_prev[40];
	end
	if (
		( mensagem_criptografada_expected_prev[41] !== 1'bx ) && ( mensagem_criptografada_prev[41] !== mensagem_criptografada_expected_prev[41] )
		&& ((mensagem_criptografada_expected_prev[41] !== last_mensagem_criptografada_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[41] = mensagem_criptografada_expected_prev[41];
	end
	if (
		( mensagem_criptografada_expected_prev[42] !== 1'bx ) && ( mensagem_criptografada_prev[42] !== mensagem_criptografada_expected_prev[42] )
		&& ((mensagem_criptografada_expected_prev[42] !== last_mensagem_criptografada_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[42] = mensagem_criptografada_expected_prev[42];
	end
	if (
		( mensagem_criptografada_expected_prev[43] !== 1'bx ) && ( mensagem_criptografada_prev[43] !== mensagem_criptografada_expected_prev[43] )
		&& ((mensagem_criptografada_expected_prev[43] !== last_mensagem_criptografada_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[43] = mensagem_criptografada_expected_prev[43];
	end
	if (
		( mensagem_criptografada_expected_prev[44] !== 1'bx ) && ( mensagem_criptografada_prev[44] !== mensagem_criptografada_expected_prev[44] )
		&& ((mensagem_criptografada_expected_prev[44] !== last_mensagem_criptografada_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[44] = mensagem_criptografada_expected_prev[44];
	end
	if (
		( mensagem_criptografada_expected_prev[45] !== 1'bx ) && ( mensagem_criptografada_prev[45] !== mensagem_criptografada_expected_prev[45] )
		&& ((mensagem_criptografada_expected_prev[45] !== last_mensagem_criptografada_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[45] = mensagem_criptografada_expected_prev[45];
	end
	if (
		( mensagem_criptografada_expected_prev[46] !== 1'bx ) && ( mensagem_criptografada_prev[46] !== mensagem_criptografada_expected_prev[46] )
		&& ((mensagem_criptografada_expected_prev[46] !== last_mensagem_criptografada_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[46] = mensagem_criptografada_expected_prev[46];
	end
	if (
		( mensagem_criptografada_expected_prev[47] !== 1'bx ) && ( mensagem_criptografada_prev[47] !== mensagem_criptografada_expected_prev[47] )
		&& ((mensagem_criptografada_expected_prev[47] !== last_mensagem_criptografada_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[47] = mensagem_criptografada_expected_prev[47];
	end
	if (
		( mensagem_criptografada_expected_prev[48] !== 1'bx ) && ( mensagem_criptografada_prev[48] !== mensagem_criptografada_expected_prev[48] )
		&& ((mensagem_criptografada_expected_prev[48] !== last_mensagem_criptografada_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[48] = mensagem_criptografada_expected_prev[48];
	end
	if (
		( mensagem_criptografada_expected_prev[49] !== 1'bx ) && ( mensagem_criptografada_prev[49] !== mensagem_criptografada_expected_prev[49] )
		&& ((mensagem_criptografada_expected_prev[49] !== last_mensagem_criptografada_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[49] = mensagem_criptografada_expected_prev[49];
	end
	if (
		( mensagem_criptografada_expected_prev[50] !== 1'bx ) && ( mensagem_criptografada_prev[50] !== mensagem_criptografada_expected_prev[50] )
		&& ((mensagem_criptografada_expected_prev[50] !== last_mensagem_criptografada_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[50] = mensagem_criptografada_expected_prev[50];
	end
	if (
		( mensagem_criptografada_expected_prev[51] !== 1'bx ) && ( mensagem_criptografada_prev[51] !== mensagem_criptografada_expected_prev[51] )
		&& ((mensagem_criptografada_expected_prev[51] !== last_mensagem_criptografada_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[51] = mensagem_criptografada_expected_prev[51];
	end
	if (
		( mensagem_criptografada_expected_prev[52] !== 1'bx ) && ( mensagem_criptografada_prev[52] !== mensagem_criptografada_expected_prev[52] )
		&& ((mensagem_criptografada_expected_prev[52] !== last_mensagem_criptografada_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[52] = mensagem_criptografada_expected_prev[52];
	end
	if (
		( mensagem_criptografada_expected_prev[53] !== 1'bx ) && ( mensagem_criptografada_prev[53] !== mensagem_criptografada_expected_prev[53] )
		&& ((mensagem_criptografada_expected_prev[53] !== last_mensagem_criptografada_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[53] = mensagem_criptografada_expected_prev[53];
	end
	if (
		( mensagem_criptografada_expected_prev[54] !== 1'bx ) && ( mensagem_criptografada_prev[54] !== mensagem_criptografada_expected_prev[54] )
		&& ((mensagem_criptografada_expected_prev[54] !== last_mensagem_criptografada_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[54] = mensagem_criptografada_expected_prev[54];
	end
	if (
		( mensagem_criptografada_expected_prev[55] !== 1'bx ) && ( mensagem_criptografada_prev[55] !== mensagem_criptografada_expected_prev[55] )
		&& ((mensagem_criptografada_expected_prev[55] !== last_mensagem_criptografada_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[55] = mensagem_criptografada_expected_prev[55];
	end
	if (
		( mensagem_criptografada_expected_prev[56] !== 1'bx ) && ( mensagem_criptografada_prev[56] !== mensagem_criptografada_expected_prev[56] )
		&& ((mensagem_criptografada_expected_prev[56] !== last_mensagem_criptografada_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[56] = mensagem_criptografada_expected_prev[56];
	end
	if (
		( mensagem_criptografada_expected_prev[57] !== 1'bx ) && ( mensagem_criptografada_prev[57] !== mensagem_criptografada_expected_prev[57] )
		&& ((mensagem_criptografada_expected_prev[57] !== last_mensagem_criptografada_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[57] = mensagem_criptografada_expected_prev[57];
	end
	if (
		( mensagem_criptografada_expected_prev[58] !== 1'bx ) && ( mensagem_criptografada_prev[58] !== mensagem_criptografada_expected_prev[58] )
		&& ((mensagem_criptografada_expected_prev[58] !== last_mensagem_criptografada_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[58] = mensagem_criptografada_expected_prev[58];
	end
	if (
		( mensagem_criptografada_expected_prev[59] !== 1'bx ) && ( mensagem_criptografada_prev[59] !== mensagem_criptografada_expected_prev[59] )
		&& ((mensagem_criptografada_expected_prev[59] !== last_mensagem_criptografada_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[59] = mensagem_criptografada_expected_prev[59];
	end
	if (
		( mensagem_criptografada_expected_prev[60] !== 1'bx ) && ( mensagem_criptografada_prev[60] !== mensagem_criptografada_expected_prev[60] )
		&& ((mensagem_criptografada_expected_prev[60] !== last_mensagem_criptografada_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[60] = mensagem_criptografada_expected_prev[60];
	end
	if (
		( mensagem_criptografada_expected_prev[61] !== 1'bx ) && ( mensagem_criptografada_prev[61] !== mensagem_criptografada_expected_prev[61] )
		&& ((mensagem_criptografada_expected_prev[61] !== last_mensagem_criptografada_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[61] = mensagem_criptografada_expected_prev[61];
	end
	if (
		( mensagem_criptografada_expected_prev[62] !== 1'bx ) && ( mensagem_criptografada_prev[62] !== mensagem_criptografada_expected_prev[62] )
		&& ((mensagem_criptografada_expected_prev[62] !== last_mensagem_criptografada_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[62] = mensagem_criptografada_expected_prev[62];
	end
	if (
		( mensagem_criptografada_expected_prev[63] !== 1'bx ) && ( mensagem_criptografada_prev[63] !== mensagem_criptografada_expected_prev[63] )
		&& ((mensagem_criptografada_expected_prev[63] !== last_mensagem_criptografada_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[63] = mensagem_criptografada_expected_prev[63];
	end
	if (
		( mensagem_criptografada_expected_prev[64] !== 1'bx ) && ( mensagem_criptografada_prev[64] !== mensagem_criptografada_expected_prev[64] )
		&& ((mensagem_criptografada_expected_prev[64] !== last_mensagem_criptografada_exp[64]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[64] = mensagem_criptografada_expected_prev[64];
	end
	if (
		( mensagem_criptografada_expected_prev[65] !== 1'bx ) && ( mensagem_criptografada_prev[65] !== mensagem_criptografada_expected_prev[65] )
		&& ((mensagem_criptografada_expected_prev[65] !== last_mensagem_criptografada_exp[65]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[65] = mensagem_criptografada_expected_prev[65];
	end
	if (
		( mensagem_criptografada_expected_prev[66] !== 1'bx ) && ( mensagem_criptografada_prev[66] !== mensagem_criptografada_expected_prev[66] )
		&& ((mensagem_criptografada_expected_prev[66] !== last_mensagem_criptografada_exp[66]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[66] = mensagem_criptografada_expected_prev[66];
	end
	if (
		( mensagem_criptografada_expected_prev[67] !== 1'bx ) && ( mensagem_criptografada_prev[67] !== mensagem_criptografada_expected_prev[67] )
		&& ((mensagem_criptografada_expected_prev[67] !== last_mensagem_criptografada_exp[67]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[67] = mensagem_criptografada_expected_prev[67];
	end
	if (
		( mensagem_criptografada_expected_prev[68] !== 1'bx ) && ( mensagem_criptografada_prev[68] !== mensagem_criptografada_expected_prev[68] )
		&& ((mensagem_criptografada_expected_prev[68] !== last_mensagem_criptografada_exp[68]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[68] = mensagem_criptografada_expected_prev[68];
	end
	if (
		( mensagem_criptografada_expected_prev[69] !== 1'bx ) && ( mensagem_criptografada_prev[69] !== mensagem_criptografada_expected_prev[69] )
		&& ((mensagem_criptografada_expected_prev[69] !== last_mensagem_criptografada_exp[69]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[69] = mensagem_criptografada_expected_prev[69];
	end
	if (
		( mensagem_criptografada_expected_prev[70] !== 1'bx ) && ( mensagem_criptografada_prev[70] !== mensagem_criptografada_expected_prev[70] )
		&& ((mensagem_criptografada_expected_prev[70] !== last_mensagem_criptografada_exp[70]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[70] = mensagem_criptografada_expected_prev[70];
	end
	if (
		( mensagem_criptografada_expected_prev[71] !== 1'bx ) && ( mensagem_criptografada_prev[71] !== mensagem_criptografada_expected_prev[71] )
		&& ((mensagem_criptografada_expected_prev[71] !== last_mensagem_criptografada_exp[71]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[71] = mensagem_criptografada_expected_prev[71];
	end
	if (
		( mensagem_criptografada_expected_prev[72] !== 1'bx ) && ( mensagem_criptografada_prev[72] !== mensagem_criptografada_expected_prev[72] )
		&& ((mensagem_criptografada_expected_prev[72] !== last_mensagem_criptografada_exp[72]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[72] = mensagem_criptografada_expected_prev[72];
	end
	if (
		( mensagem_criptografada_expected_prev[73] !== 1'bx ) && ( mensagem_criptografada_prev[73] !== mensagem_criptografada_expected_prev[73] )
		&& ((mensagem_criptografada_expected_prev[73] !== last_mensagem_criptografada_exp[73]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[73] = mensagem_criptografada_expected_prev[73];
	end
	if (
		( mensagem_criptografada_expected_prev[74] !== 1'bx ) && ( mensagem_criptografada_prev[74] !== mensagem_criptografada_expected_prev[74] )
		&& ((mensagem_criptografada_expected_prev[74] !== last_mensagem_criptografada_exp[74]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[74] = mensagem_criptografada_expected_prev[74];
	end
	if (
		( mensagem_criptografada_expected_prev[75] !== 1'bx ) && ( mensagem_criptografada_prev[75] !== mensagem_criptografada_expected_prev[75] )
		&& ((mensagem_criptografada_expected_prev[75] !== last_mensagem_criptografada_exp[75]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[75] = mensagem_criptografada_expected_prev[75];
	end
	if (
		( mensagem_criptografada_expected_prev[76] !== 1'bx ) && ( mensagem_criptografada_prev[76] !== mensagem_criptografada_expected_prev[76] )
		&& ((mensagem_criptografada_expected_prev[76] !== last_mensagem_criptografada_exp[76]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[76] = mensagem_criptografada_expected_prev[76];
	end
	if (
		( mensagem_criptografada_expected_prev[77] !== 1'bx ) && ( mensagem_criptografada_prev[77] !== mensagem_criptografada_expected_prev[77] )
		&& ((mensagem_criptografada_expected_prev[77] !== last_mensagem_criptografada_exp[77]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[77] = mensagem_criptografada_expected_prev[77];
	end
	if (
		( mensagem_criptografada_expected_prev[78] !== 1'bx ) && ( mensagem_criptografada_prev[78] !== mensagem_criptografada_expected_prev[78] )
		&& ((mensagem_criptografada_expected_prev[78] !== last_mensagem_criptografada_exp[78]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[78] = mensagem_criptografada_expected_prev[78];
	end
	if (
		( mensagem_criptografada_expected_prev[79] !== 1'bx ) && ( mensagem_criptografada_prev[79] !== mensagem_criptografada_expected_prev[79] )
		&& ((mensagem_criptografada_expected_prev[79] !== last_mensagem_criptografada_exp[79]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[79] = mensagem_criptografada_expected_prev[79];
	end
	if (
		( mensagem_criptografada_expected_prev[80] !== 1'bx ) && ( mensagem_criptografada_prev[80] !== mensagem_criptografada_expected_prev[80] )
		&& ((mensagem_criptografada_expected_prev[80] !== last_mensagem_criptografada_exp[80]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[80] = mensagem_criptografada_expected_prev[80];
	end
	if (
		( mensagem_criptografada_expected_prev[81] !== 1'bx ) && ( mensagem_criptografada_prev[81] !== mensagem_criptografada_expected_prev[81] )
		&& ((mensagem_criptografada_expected_prev[81] !== last_mensagem_criptografada_exp[81]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[81] = mensagem_criptografada_expected_prev[81];
	end
	if (
		( mensagem_criptografada_expected_prev[82] !== 1'bx ) && ( mensagem_criptografada_prev[82] !== mensagem_criptografada_expected_prev[82] )
		&& ((mensagem_criptografada_expected_prev[82] !== last_mensagem_criptografada_exp[82]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[82] = mensagem_criptografada_expected_prev[82];
	end
	if (
		( mensagem_criptografada_expected_prev[83] !== 1'bx ) && ( mensagem_criptografada_prev[83] !== mensagem_criptografada_expected_prev[83] )
		&& ((mensagem_criptografada_expected_prev[83] !== last_mensagem_criptografada_exp[83]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[83] = mensagem_criptografada_expected_prev[83];
	end
	if (
		( mensagem_criptografada_expected_prev[84] !== 1'bx ) && ( mensagem_criptografada_prev[84] !== mensagem_criptografada_expected_prev[84] )
		&& ((mensagem_criptografada_expected_prev[84] !== last_mensagem_criptografada_exp[84]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[84] = mensagem_criptografada_expected_prev[84];
	end
	if (
		( mensagem_criptografada_expected_prev[85] !== 1'bx ) && ( mensagem_criptografada_prev[85] !== mensagem_criptografada_expected_prev[85] )
		&& ((mensagem_criptografada_expected_prev[85] !== last_mensagem_criptografada_exp[85]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[85] = mensagem_criptografada_expected_prev[85];
	end
	if (
		( mensagem_criptografada_expected_prev[86] !== 1'bx ) && ( mensagem_criptografada_prev[86] !== mensagem_criptografada_expected_prev[86] )
		&& ((mensagem_criptografada_expected_prev[86] !== last_mensagem_criptografada_exp[86]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[86] = mensagem_criptografada_expected_prev[86];
	end
	if (
		( mensagem_criptografada_expected_prev[87] !== 1'bx ) && ( mensagem_criptografada_prev[87] !== mensagem_criptografada_expected_prev[87] )
		&& ((mensagem_criptografada_expected_prev[87] !== last_mensagem_criptografada_exp[87]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[87] = mensagem_criptografada_expected_prev[87];
	end
	if (
		( mensagem_criptografada_expected_prev[88] !== 1'bx ) && ( mensagem_criptografada_prev[88] !== mensagem_criptografada_expected_prev[88] )
		&& ((mensagem_criptografada_expected_prev[88] !== last_mensagem_criptografada_exp[88]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[88] = mensagem_criptografada_expected_prev[88];
	end
	if (
		( mensagem_criptografada_expected_prev[89] !== 1'bx ) && ( mensagem_criptografada_prev[89] !== mensagem_criptografada_expected_prev[89] )
		&& ((mensagem_criptografada_expected_prev[89] !== last_mensagem_criptografada_exp[89]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[89] = mensagem_criptografada_expected_prev[89];
	end
	if (
		( mensagem_criptografada_expected_prev[90] !== 1'bx ) && ( mensagem_criptografada_prev[90] !== mensagem_criptografada_expected_prev[90] )
		&& ((mensagem_criptografada_expected_prev[90] !== last_mensagem_criptografada_exp[90]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[90] = mensagem_criptografada_expected_prev[90];
	end
	if (
		( mensagem_criptografada_expected_prev[91] !== 1'bx ) && ( mensagem_criptografada_prev[91] !== mensagem_criptografada_expected_prev[91] )
		&& ((mensagem_criptografada_expected_prev[91] !== last_mensagem_criptografada_exp[91]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[91] = mensagem_criptografada_expected_prev[91];
	end
	if (
		( mensagem_criptografada_expected_prev[92] !== 1'bx ) && ( mensagem_criptografada_prev[92] !== mensagem_criptografada_expected_prev[92] )
		&& ((mensagem_criptografada_expected_prev[92] !== last_mensagem_criptografada_exp[92]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[92] = mensagem_criptografada_expected_prev[92];
	end
	if (
		( mensagem_criptografada_expected_prev[93] !== 1'bx ) && ( mensagem_criptografada_prev[93] !== mensagem_criptografada_expected_prev[93] )
		&& ((mensagem_criptografada_expected_prev[93] !== last_mensagem_criptografada_exp[93]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[93] = mensagem_criptografada_expected_prev[93];
	end
	if (
		( mensagem_criptografada_expected_prev[94] !== 1'bx ) && ( mensagem_criptografada_prev[94] !== mensagem_criptografada_expected_prev[94] )
		&& ((mensagem_criptografada_expected_prev[94] !== last_mensagem_criptografada_exp[94]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[94] = mensagem_criptografada_expected_prev[94];
	end
	if (
		( mensagem_criptografada_expected_prev[95] !== 1'bx ) && ( mensagem_criptografada_prev[95] !== mensagem_criptografada_expected_prev[95] )
		&& ((mensagem_criptografada_expected_prev[95] !== last_mensagem_criptografada_exp[95]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[95] = mensagem_criptografada_expected_prev[95];
	end
	if (
		( mensagem_criptografada_expected_prev[96] !== 1'bx ) && ( mensagem_criptografada_prev[96] !== mensagem_criptografada_expected_prev[96] )
		&& ((mensagem_criptografada_expected_prev[96] !== last_mensagem_criptografada_exp[96]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[96] = mensagem_criptografada_expected_prev[96];
	end
	if (
		( mensagem_criptografada_expected_prev[97] !== 1'bx ) && ( mensagem_criptografada_prev[97] !== mensagem_criptografada_expected_prev[97] )
		&& ((mensagem_criptografada_expected_prev[97] !== last_mensagem_criptografada_exp[97]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[97] = mensagem_criptografada_expected_prev[97];
	end
	if (
		( mensagem_criptografada_expected_prev[98] !== 1'bx ) && ( mensagem_criptografada_prev[98] !== mensagem_criptografada_expected_prev[98] )
		&& ((mensagem_criptografada_expected_prev[98] !== last_mensagem_criptografada_exp[98]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[98] = mensagem_criptografada_expected_prev[98];
	end
	if (
		( mensagem_criptografada_expected_prev[99] !== 1'bx ) && ( mensagem_criptografada_prev[99] !== mensagem_criptografada_expected_prev[99] )
		&& ((mensagem_criptografada_expected_prev[99] !== last_mensagem_criptografada_exp[99]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[99] = mensagem_criptografada_expected_prev[99];
	end
	if (
		( mensagem_criptografada_expected_prev[100] !== 1'bx ) && ( mensagem_criptografada_prev[100] !== mensagem_criptografada_expected_prev[100] )
		&& ((mensagem_criptografada_expected_prev[100] !== last_mensagem_criptografada_exp[100]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[100] = mensagem_criptografada_expected_prev[100];
	end
	if (
		( mensagem_criptografada_expected_prev[101] !== 1'bx ) && ( mensagem_criptografada_prev[101] !== mensagem_criptografada_expected_prev[101] )
		&& ((mensagem_criptografada_expected_prev[101] !== last_mensagem_criptografada_exp[101]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[101] = mensagem_criptografada_expected_prev[101];
	end
	if (
		( mensagem_criptografada_expected_prev[102] !== 1'bx ) && ( mensagem_criptografada_prev[102] !== mensagem_criptografada_expected_prev[102] )
		&& ((mensagem_criptografada_expected_prev[102] !== last_mensagem_criptografada_exp[102]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[102] = mensagem_criptografada_expected_prev[102];
	end
	if (
		( mensagem_criptografada_expected_prev[103] !== 1'bx ) && ( mensagem_criptografada_prev[103] !== mensagem_criptografada_expected_prev[103] )
		&& ((mensagem_criptografada_expected_prev[103] !== last_mensagem_criptografada_exp[103]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[103] = mensagem_criptografada_expected_prev[103];
	end
	if (
		( mensagem_criptografada_expected_prev[104] !== 1'bx ) && ( mensagem_criptografada_prev[104] !== mensagem_criptografada_expected_prev[104] )
		&& ((mensagem_criptografada_expected_prev[104] !== last_mensagem_criptografada_exp[104]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[104] = mensagem_criptografada_expected_prev[104];
	end
	if (
		( mensagem_criptografada_expected_prev[105] !== 1'bx ) && ( mensagem_criptografada_prev[105] !== mensagem_criptografada_expected_prev[105] )
		&& ((mensagem_criptografada_expected_prev[105] !== last_mensagem_criptografada_exp[105]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[105] = mensagem_criptografada_expected_prev[105];
	end
	if (
		( mensagem_criptografada_expected_prev[106] !== 1'bx ) && ( mensagem_criptografada_prev[106] !== mensagem_criptografada_expected_prev[106] )
		&& ((mensagem_criptografada_expected_prev[106] !== last_mensagem_criptografada_exp[106]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[106] = mensagem_criptografada_expected_prev[106];
	end
	if (
		( mensagem_criptografada_expected_prev[107] !== 1'bx ) && ( mensagem_criptografada_prev[107] !== mensagem_criptografada_expected_prev[107] )
		&& ((mensagem_criptografada_expected_prev[107] !== last_mensagem_criptografada_exp[107]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[107] = mensagem_criptografada_expected_prev[107];
	end
	if (
		( mensagem_criptografada_expected_prev[108] !== 1'bx ) && ( mensagem_criptografada_prev[108] !== mensagem_criptografada_expected_prev[108] )
		&& ((mensagem_criptografada_expected_prev[108] !== last_mensagem_criptografada_exp[108]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[108] = mensagem_criptografada_expected_prev[108];
	end
	if (
		( mensagem_criptografada_expected_prev[109] !== 1'bx ) && ( mensagem_criptografada_prev[109] !== mensagem_criptografada_expected_prev[109] )
		&& ((mensagem_criptografada_expected_prev[109] !== last_mensagem_criptografada_exp[109]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[109] = mensagem_criptografada_expected_prev[109];
	end
	if (
		( mensagem_criptografada_expected_prev[110] !== 1'bx ) && ( mensagem_criptografada_prev[110] !== mensagem_criptografada_expected_prev[110] )
		&& ((mensagem_criptografada_expected_prev[110] !== last_mensagem_criptografada_exp[110]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[110] = mensagem_criptografada_expected_prev[110];
	end
	if (
		( mensagem_criptografada_expected_prev[111] !== 1'bx ) && ( mensagem_criptografada_prev[111] !== mensagem_criptografada_expected_prev[111] )
		&& ((mensagem_criptografada_expected_prev[111] !== last_mensagem_criptografada_exp[111]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[111] = mensagem_criptografada_expected_prev[111];
	end
	if (
		( mensagem_criptografada_expected_prev[112] !== 1'bx ) && ( mensagem_criptografada_prev[112] !== mensagem_criptografada_expected_prev[112] )
		&& ((mensagem_criptografada_expected_prev[112] !== last_mensagem_criptografada_exp[112]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[112] = mensagem_criptografada_expected_prev[112];
	end
	if (
		( mensagem_criptografada_expected_prev[113] !== 1'bx ) && ( mensagem_criptografada_prev[113] !== mensagem_criptografada_expected_prev[113] )
		&& ((mensagem_criptografada_expected_prev[113] !== last_mensagem_criptografada_exp[113]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[113] = mensagem_criptografada_expected_prev[113];
	end
	if (
		( mensagem_criptografada_expected_prev[114] !== 1'bx ) && ( mensagem_criptografada_prev[114] !== mensagem_criptografada_expected_prev[114] )
		&& ((mensagem_criptografada_expected_prev[114] !== last_mensagem_criptografada_exp[114]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[114] = mensagem_criptografada_expected_prev[114];
	end
	if (
		( mensagem_criptografada_expected_prev[115] !== 1'bx ) && ( mensagem_criptografada_prev[115] !== mensagem_criptografada_expected_prev[115] )
		&& ((mensagem_criptografada_expected_prev[115] !== last_mensagem_criptografada_exp[115]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[115] = mensagem_criptografada_expected_prev[115];
	end
	if (
		( mensagem_criptografada_expected_prev[116] !== 1'bx ) && ( mensagem_criptografada_prev[116] !== mensagem_criptografada_expected_prev[116] )
		&& ((mensagem_criptografada_expected_prev[116] !== last_mensagem_criptografada_exp[116]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[116] = mensagem_criptografada_expected_prev[116];
	end
	if (
		( mensagem_criptografada_expected_prev[117] !== 1'bx ) && ( mensagem_criptografada_prev[117] !== mensagem_criptografada_expected_prev[117] )
		&& ((mensagem_criptografada_expected_prev[117] !== last_mensagem_criptografada_exp[117]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[117] = mensagem_criptografada_expected_prev[117];
	end
	if (
		( mensagem_criptografada_expected_prev[118] !== 1'bx ) && ( mensagem_criptografada_prev[118] !== mensagem_criptografada_expected_prev[118] )
		&& ((mensagem_criptografada_expected_prev[118] !== last_mensagem_criptografada_exp[118]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[118] = mensagem_criptografada_expected_prev[118];
	end
	if (
		( mensagem_criptografada_expected_prev[119] !== 1'bx ) && ( mensagem_criptografada_prev[119] !== mensagem_criptografada_expected_prev[119] )
		&& ((mensagem_criptografada_expected_prev[119] !== last_mensagem_criptografada_exp[119]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[119] = mensagem_criptografada_expected_prev[119];
	end
	if (
		( mensagem_criptografada_expected_prev[120] !== 1'bx ) && ( mensagem_criptografada_prev[120] !== mensagem_criptografada_expected_prev[120] )
		&& ((mensagem_criptografada_expected_prev[120] !== last_mensagem_criptografada_exp[120]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[120] = mensagem_criptografada_expected_prev[120];
	end
	if (
		( mensagem_criptografada_expected_prev[121] !== 1'bx ) && ( mensagem_criptografada_prev[121] !== mensagem_criptografada_expected_prev[121] )
		&& ((mensagem_criptografada_expected_prev[121] !== last_mensagem_criptografada_exp[121]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[121] = mensagem_criptografada_expected_prev[121];
	end
	if (
		( mensagem_criptografada_expected_prev[122] !== 1'bx ) && ( mensagem_criptografada_prev[122] !== mensagem_criptografada_expected_prev[122] )
		&& ((mensagem_criptografada_expected_prev[122] !== last_mensagem_criptografada_exp[122]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[122] = mensagem_criptografada_expected_prev[122];
	end
	if (
		( mensagem_criptografada_expected_prev[123] !== 1'bx ) && ( mensagem_criptografada_prev[123] !== mensagem_criptografada_expected_prev[123] )
		&& ((mensagem_criptografada_expected_prev[123] !== last_mensagem_criptografada_exp[123]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[123] = mensagem_criptografada_expected_prev[123];
	end
	if (
		( mensagem_criptografada_expected_prev[124] !== 1'bx ) && ( mensagem_criptografada_prev[124] !== mensagem_criptografada_expected_prev[124] )
		&& ((mensagem_criptografada_expected_prev[124] !== last_mensagem_criptografada_exp[124]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[124] = mensagem_criptografada_expected_prev[124];
	end
	if (
		( mensagem_criptografada_expected_prev[125] !== 1'bx ) && ( mensagem_criptografada_prev[125] !== mensagem_criptografada_expected_prev[125] )
		&& ((mensagem_criptografada_expected_prev[125] !== last_mensagem_criptografada_exp[125]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[125] = mensagem_criptografada_expected_prev[125];
	end
	if (
		( mensagem_criptografada_expected_prev[126] !== 1'bx ) && ( mensagem_criptografada_prev[126] !== mensagem_criptografada_expected_prev[126] )
		&& ((mensagem_criptografada_expected_prev[126] !== last_mensagem_criptografada_exp[126]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[126] = mensagem_criptografada_expected_prev[126];
	end
	if (
		( mensagem_criptografada_expected_prev[127] !== 1'bx ) && ( mensagem_criptografada_prev[127] !== mensagem_criptografada_expected_prev[127] )
		&& ((mensagem_criptografada_expected_prev[127] !== last_mensagem_criptografada_exp[127]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mensagem_criptografada[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mensagem_criptografada_expected_prev);
		$display ("     Real value = %b", mensagem_criptografada_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mensagem_criptografada_exp[127] = mensagem_criptografada_expected_prev[127];
	end
	if (
		( state_view_expected_prev[0] !== 1'bx ) && ( state_view_prev[0] !== state_view_expected_prev[0] )
		&& ((state_view_expected_prev[0] !== last_state_view_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_view_expected_prev);
		$display ("     Real value = %b", state_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_state_view_exp[0] = state_view_expected_prev[0];
	end
	if (
		( state_view_expected_prev[1] !== 1'bx ) && ( state_view_prev[1] !== state_view_expected_prev[1] )
		&& ((state_view_expected_prev[1] !== last_state_view_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_view_expected_prev);
		$display ("     Real value = %b", state_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_state_view_exp[1] = state_view_expected_prev[1];
	end
	if (
		( state_view_expected_prev[2] !== 1'bx ) && ( state_view_prev[2] !== state_view_expected_prev[2] )
		&& ((state_view_expected_prev[2] !== last_state_view_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_view_expected_prev);
		$display ("     Real value = %b", state_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_state_view_exp[2] = state_view_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module aes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [0:127] key;
reg [0:127] msg;
reg reset;
// wires                                               
wire [0:127] mensagem_criptografada;
wire [2:0] state_view;

wire sampler;                             

// assign statements (if any)                          
aes i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.key(key),
	.mensagem_criptografada(mensagem_criptografada),
	.msg(msg),
	.reset(reset),
	.state_view(state_view)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// key[ 127 ]
initial
begin
	key[127] = 1'b0;
end 
// key[ 126 ]
initial
begin
	key[126] = 1'b0;
end 
// key[ 125 ]
initial
begin
	key[125] = 1'b0;
end 
// key[ 124 ]
initial
begin
	key[124] = 1'b0;
end 
// key[ 123 ]
initial
begin
	key[123] = 1'b0;
end 
// key[ 122 ]
initial
begin
	key[122] = 1'b0;
end 
// key[ 121 ]
initial
begin
	key[121] = 1'b0;
end 
// key[ 120 ]
initial
begin
	key[120] = 1'b0;
end 
// key[ 119 ]
initial
begin
	key[119] = 1'b0;
end 
// key[ 118 ]
initial
begin
	key[118] = 1'b0;
end 
// key[ 117 ]
initial
begin
	key[117] = 1'b0;
end 
// key[ 116 ]
initial
begin
	key[116] = 1'b0;
end 
// key[ 115 ]
initial
begin
	key[115] = 1'b0;
end 
// key[ 114 ]
initial
begin
	key[114] = 1'b0;
end 
// key[ 113 ]
initial
begin
	key[113] = 1'b0;
end 
// key[ 112 ]
initial
begin
	key[112] = 1'b0;
end 
// key[ 111 ]
initial
begin
	key[111] = 1'b0;
end 
// key[ 110 ]
initial
begin
	key[110] = 1'b0;
end 
// key[ 109 ]
initial
begin
	key[109] = 1'b0;
end 
// key[ 108 ]
initial
begin
	key[108] = 1'b0;
end 
// key[ 107 ]
initial
begin
	key[107] = 1'b0;
end 
// key[ 106 ]
initial
begin
	key[106] = 1'b0;
end 
// key[ 105 ]
initial
begin
	key[105] = 1'b0;
end 
// key[ 104 ]
initial
begin
	key[104] = 1'b0;
end 
// key[ 103 ]
initial
begin
	key[103] = 1'b0;
end 
// key[ 102 ]
initial
begin
	key[102] = 1'b0;
end 
// key[ 101 ]
initial
begin
	key[101] = 1'b0;
end 
// key[ 100 ]
initial
begin
	key[100] = 1'b0;
end 
// key[ 99 ]
initial
begin
	key[99] = 1'b0;
end 
// key[ 98 ]
initial
begin
	key[98] = 1'b0;
end 
// key[ 97 ]
initial
begin
	key[97] = 1'b0;
end 
// key[ 96 ]
initial
begin
	key[96] = 1'b0;
end 
// key[ 95 ]
initial
begin
	key[95] = 1'b0;
end 
// key[ 94 ]
initial
begin
	key[94] = 1'b0;
end 
// key[ 93 ]
initial
begin
	key[93] = 1'b0;
end 
// key[ 92 ]
initial
begin
	key[92] = 1'b0;
end 
// key[ 91 ]
initial
begin
	key[91] = 1'b0;
end 
// key[ 90 ]
initial
begin
	key[90] = 1'b0;
end 
// key[ 89 ]
initial
begin
	key[89] = 1'b0;
end 
// key[ 88 ]
initial
begin
	key[88] = 1'b0;
end 
// key[ 87 ]
initial
begin
	key[87] = 1'b0;
end 
// key[ 86 ]
initial
begin
	key[86] = 1'b0;
end 
// key[ 85 ]
initial
begin
	key[85] = 1'b0;
end 
// key[ 84 ]
initial
begin
	key[84] = 1'b0;
end 
// key[ 83 ]
initial
begin
	key[83] = 1'b0;
end 
// key[ 82 ]
initial
begin
	key[82] = 1'b0;
end 
// key[ 81 ]
initial
begin
	key[81] = 1'b0;
end 
// key[ 80 ]
initial
begin
	key[80] = 1'b0;
end 
// key[ 79 ]
initial
begin
	key[79] = 1'b0;
end 
// key[ 78 ]
initial
begin
	key[78] = 1'b0;
end 
// key[ 77 ]
initial
begin
	key[77] = 1'b0;
end 
// key[ 76 ]
initial
begin
	key[76] = 1'b0;
end 
// key[ 75 ]
initial
begin
	key[75] = 1'b0;
end 
// key[ 74 ]
initial
begin
	key[74] = 1'b0;
end 
// key[ 73 ]
initial
begin
	key[73] = 1'b0;
end 
// key[ 72 ]
initial
begin
	key[72] = 1'b0;
end 
// key[ 71 ]
initial
begin
	key[71] = 1'b0;
end 
// key[ 70 ]
initial
begin
	key[70] = 1'b0;
end 
// key[ 69 ]
initial
begin
	key[69] = 1'b0;
end 
// key[ 68 ]
initial
begin
	key[68] = 1'b0;
end 
// key[ 67 ]
initial
begin
	key[67] = 1'b0;
end 
// key[ 66 ]
initial
begin
	key[66] = 1'b0;
end 
// key[ 65 ]
initial
begin
	key[65] = 1'b0;
end 
// key[ 64 ]
initial
begin
	key[64] = 1'b0;
end 
// key[ 63 ]
initial
begin
	key[63] = 1'b0;
end 
// key[ 62 ]
initial
begin
	key[62] = 1'b0;
end 
// key[ 61 ]
initial
begin
	key[61] = 1'b0;
end 
// key[ 60 ]
initial
begin
	key[60] = 1'b0;
end 
// key[ 59 ]
initial
begin
	key[59] = 1'b0;
end 
// key[ 58 ]
initial
begin
	key[58] = 1'b0;
end 
// key[ 57 ]
initial
begin
	key[57] = 1'b0;
end 
// key[ 56 ]
initial
begin
	key[56] = 1'b0;
end 
// key[ 55 ]
initial
begin
	key[55] = 1'b0;
end 
// key[ 54 ]
initial
begin
	key[54] = 1'b0;
end 
// key[ 53 ]
initial
begin
	key[53] = 1'b0;
end 
// key[ 52 ]
initial
begin
	key[52] = 1'b0;
end 
// key[ 51 ]
initial
begin
	key[51] = 1'b0;
end 
// key[ 50 ]
initial
begin
	key[50] = 1'b0;
end 
// key[ 49 ]
initial
begin
	key[49] = 1'b0;
end 
// key[ 48 ]
initial
begin
	key[48] = 1'b0;
end 
// key[ 47 ]
initial
begin
	key[47] = 1'b0;
end 
// key[ 46 ]
initial
begin
	key[46] = 1'b0;
end 
// key[ 45 ]
initial
begin
	key[45] = 1'b0;
end 
// key[ 44 ]
initial
begin
	key[44] = 1'b0;
end 
// key[ 43 ]
initial
begin
	key[43] = 1'b0;
end 
// key[ 42 ]
initial
begin
	key[42] = 1'b0;
end 
// key[ 41 ]
initial
begin
	key[41] = 1'b0;
end 
// key[ 40 ]
initial
begin
	key[40] = 1'b0;
end 
// key[ 39 ]
initial
begin
	key[39] = 1'b0;
end 
// key[ 38 ]
initial
begin
	key[38] = 1'b0;
end 
// key[ 37 ]
initial
begin
	key[37] = 1'b0;
end 
// key[ 36 ]
initial
begin
	key[36] = 1'b0;
end 
// key[ 35 ]
initial
begin
	key[35] = 1'b0;
end 
// key[ 34 ]
initial
begin
	key[34] = 1'b0;
end 
// key[ 33 ]
initial
begin
	key[33] = 1'b0;
end 
// key[ 32 ]
initial
begin
	key[32] = 1'b0;
end 
// key[ 31 ]
initial
begin
	key[31] = 1'b0;
end 
// key[ 30 ]
initial
begin
	key[30] = 1'b0;
end 
// key[ 29 ]
initial
begin
	key[29] = 1'b0;
end 
// key[ 28 ]
initial
begin
	key[28] = 1'b0;
end 
// key[ 27 ]
initial
begin
	key[27] = 1'b0;
end 
// key[ 26 ]
initial
begin
	key[26] = 1'b0;
end 
// key[ 25 ]
initial
begin
	key[25] = 1'b0;
end 
// key[ 24 ]
initial
begin
	key[24] = 1'b0;
end 
// key[ 23 ]
initial
begin
	key[23] = 1'b0;
end 
// key[ 22 ]
initial
begin
	key[22] = 1'b0;
end 
// key[ 21 ]
initial
begin
	key[21] = 1'b0;
end 
// key[ 20 ]
initial
begin
	key[20] = 1'b0;
end 
// key[ 19 ]
initial
begin
	key[19] = 1'b0;
end 
// key[ 18 ]
initial
begin
	key[18] = 1'b0;
end 
// key[ 17 ]
initial
begin
	key[17] = 1'b0;
end 
// key[ 16 ]
initial
begin
	key[16] = 1'b0;
end 
// key[ 15 ]
initial
begin
	key[15] = 1'b0;
end 
// key[ 14 ]
initial
begin
	key[14] = 1'b0;
end 
// key[ 13 ]
initial
begin
	key[13] = 1'b0;
end 
// key[ 12 ]
initial
begin
	key[12] = 1'b0;
end 
// key[ 11 ]
initial
begin
	key[11] = 1'b0;
end 
// key[ 10 ]
initial
begin
	key[10] = 1'b0;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b0;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b0;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b0;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b0;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b0;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 
// msg[ 127 ]
initial
begin
	msg[127] = 1'b0;
end 
// msg[ 126 ]
initial
begin
	msg[126] = 1'b0;
end 
// msg[ 125 ]
initial
begin
	msg[125] = 1'b0;
end 
// msg[ 124 ]
initial
begin
	msg[124] = 1'b0;
end 
// msg[ 123 ]
initial
begin
	msg[123] = 1'b0;
end 
// msg[ 122 ]
initial
begin
	msg[122] = 1'b0;
end 
// msg[ 121 ]
initial
begin
	msg[121] = 1'b0;
end 
// msg[ 120 ]
initial
begin
	msg[120] = 1'b0;
end 
// msg[ 119 ]
initial
begin
	msg[119] = 1'b0;
end 
// msg[ 118 ]
initial
begin
	msg[118] = 1'b0;
end 
// msg[ 117 ]
initial
begin
	msg[117] = 1'b0;
end 
// msg[ 116 ]
initial
begin
	msg[116] = 1'b0;
end 
// msg[ 115 ]
initial
begin
	msg[115] = 1'b0;
end 
// msg[ 114 ]
initial
begin
	msg[114] = 1'b0;
end 
// msg[ 113 ]
initial
begin
	msg[113] = 1'b0;
end 
// msg[ 112 ]
initial
begin
	msg[112] = 1'b0;
end 
// msg[ 111 ]
initial
begin
	msg[111] = 1'b0;
end 
// msg[ 110 ]
initial
begin
	msg[110] = 1'b0;
end 
// msg[ 109 ]
initial
begin
	msg[109] = 1'b0;
end 
// msg[ 108 ]
initial
begin
	msg[108] = 1'b0;
end 
// msg[ 107 ]
initial
begin
	msg[107] = 1'b0;
end 
// msg[ 106 ]
initial
begin
	msg[106] = 1'b0;
end 
// msg[ 105 ]
initial
begin
	msg[105] = 1'b0;
end 
// msg[ 104 ]
initial
begin
	msg[104] = 1'b0;
end 
// msg[ 103 ]
initial
begin
	msg[103] = 1'b0;
end 
// msg[ 102 ]
initial
begin
	msg[102] = 1'b0;
end 
// msg[ 101 ]
initial
begin
	msg[101] = 1'b0;
end 
// msg[ 100 ]
initial
begin
	msg[100] = 1'b0;
end 
// msg[ 99 ]
initial
begin
	msg[99] = 1'b0;
end 
// msg[ 98 ]
initial
begin
	msg[98] = 1'b0;
end 
// msg[ 97 ]
initial
begin
	msg[97] = 1'b0;
end 
// msg[ 96 ]
initial
begin
	msg[96] = 1'b0;
end 
// msg[ 95 ]
initial
begin
	msg[95] = 1'b0;
end 
// msg[ 94 ]
initial
begin
	msg[94] = 1'b0;
end 
// msg[ 93 ]
initial
begin
	msg[93] = 1'b0;
end 
// msg[ 92 ]
initial
begin
	msg[92] = 1'b0;
end 
// msg[ 91 ]
initial
begin
	msg[91] = 1'b0;
end 
// msg[ 90 ]
initial
begin
	msg[90] = 1'b0;
end 
// msg[ 89 ]
initial
begin
	msg[89] = 1'b0;
end 
// msg[ 88 ]
initial
begin
	msg[88] = 1'b0;
end 
// msg[ 87 ]
initial
begin
	msg[87] = 1'b0;
end 
// msg[ 86 ]
initial
begin
	msg[86] = 1'b0;
end 
// msg[ 85 ]
initial
begin
	msg[85] = 1'b0;
end 
// msg[ 84 ]
initial
begin
	msg[84] = 1'b0;
end 
// msg[ 83 ]
initial
begin
	msg[83] = 1'b0;
end 
// msg[ 82 ]
initial
begin
	msg[82] = 1'b0;
end 
// msg[ 81 ]
initial
begin
	msg[81] = 1'b0;
end 
// msg[ 80 ]
initial
begin
	msg[80] = 1'b0;
end 
// msg[ 79 ]
initial
begin
	msg[79] = 1'b0;
end 
// msg[ 78 ]
initial
begin
	msg[78] = 1'b0;
end 
// msg[ 77 ]
initial
begin
	msg[77] = 1'b0;
end 
// msg[ 76 ]
initial
begin
	msg[76] = 1'b0;
end 
// msg[ 75 ]
initial
begin
	msg[75] = 1'b0;
end 
// msg[ 74 ]
initial
begin
	msg[74] = 1'b0;
end 
// msg[ 73 ]
initial
begin
	msg[73] = 1'b0;
end 
// msg[ 72 ]
initial
begin
	msg[72] = 1'b0;
end 
// msg[ 71 ]
initial
begin
	msg[71] = 1'b0;
end 
// msg[ 70 ]
initial
begin
	msg[70] = 1'b0;
end 
// msg[ 69 ]
initial
begin
	msg[69] = 1'b0;
end 
// msg[ 68 ]
initial
begin
	msg[68] = 1'b0;
end 
// msg[ 67 ]
initial
begin
	msg[67] = 1'b0;
end 
// msg[ 66 ]
initial
begin
	msg[66] = 1'b0;
end 
// msg[ 65 ]
initial
begin
	msg[65] = 1'b0;
end 
// msg[ 64 ]
initial
begin
	msg[64] = 1'b0;
end 
// msg[ 63 ]
initial
begin
	msg[63] = 1'b0;
end 
// msg[ 62 ]
initial
begin
	msg[62] = 1'b0;
end 
// msg[ 61 ]
initial
begin
	msg[61] = 1'b0;
end 
// msg[ 60 ]
initial
begin
	msg[60] = 1'b0;
end 
// msg[ 59 ]
initial
begin
	msg[59] = 1'b0;
end 
// msg[ 58 ]
initial
begin
	msg[58] = 1'b0;
end 
// msg[ 57 ]
initial
begin
	msg[57] = 1'b0;
end 
// msg[ 56 ]
initial
begin
	msg[56] = 1'b0;
end 
// msg[ 55 ]
initial
begin
	msg[55] = 1'b0;
end 
// msg[ 54 ]
initial
begin
	msg[54] = 1'b0;
end 
// msg[ 53 ]
initial
begin
	msg[53] = 1'b0;
end 
// msg[ 52 ]
initial
begin
	msg[52] = 1'b0;
end 
// msg[ 51 ]
initial
begin
	msg[51] = 1'b0;
end 
// msg[ 50 ]
initial
begin
	msg[50] = 1'b0;
end 
// msg[ 49 ]
initial
begin
	msg[49] = 1'b0;
end 
// msg[ 48 ]
initial
begin
	msg[48] = 1'b0;
end 
// msg[ 47 ]
initial
begin
	msg[47] = 1'b0;
end 
// msg[ 46 ]
initial
begin
	msg[46] = 1'b0;
end 
// msg[ 45 ]
initial
begin
	msg[45] = 1'b0;
end 
// msg[ 44 ]
initial
begin
	msg[44] = 1'b0;
end 
// msg[ 43 ]
initial
begin
	msg[43] = 1'b0;
end 
// msg[ 42 ]
initial
begin
	msg[42] = 1'b0;
end 
// msg[ 41 ]
initial
begin
	msg[41] = 1'b0;
end 
// msg[ 40 ]
initial
begin
	msg[40] = 1'b0;
end 
// msg[ 39 ]
initial
begin
	msg[39] = 1'b0;
end 
// msg[ 38 ]
initial
begin
	msg[38] = 1'b0;
end 
// msg[ 37 ]
initial
begin
	msg[37] = 1'b0;
end 
// msg[ 36 ]
initial
begin
	msg[36] = 1'b0;
end 
// msg[ 35 ]
initial
begin
	msg[35] = 1'b0;
end 
// msg[ 34 ]
initial
begin
	msg[34] = 1'b0;
end 
// msg[ 33 ]
initial
begin
	msg[33] = 1'b0;
end 
// msg[ 32 ]
initial
begin
	msg[32] = 1'b0;
end 
// msg[ 31 ]
initial
begin
	msg[31] = 1'b0;
end 
// msg[ 30 ]
initial
begin
	msg[30] = 1'b0;
end 
// msg[ 29 ]
initial
begin
	msg[29] = 1'b0;
end 
// msg[ 28 ]
initial
begin
	msg[28] = 1'b0;
end 
// msg[ 27 ]
initial
begin
	msg[27] = 1'b0;
end 
// msg[ 26 ]
initial
begin
	msg[26] = 1'b0;
end 
// msg[ 25 ]
initial
begin
	msg[25] = 1'b0;
end 
// msg[ 24 ]
initial
begin
	msg[24] = 1'b0;
end 
// msg[ 23 ]
initial
begin
	msg[23] = 1'b0;
end 
// msg[ 22 ]
initial
begin
	msg[22] = 1'b0;
end 
// msg[ 21 ]
initial
begin
	msg[21] = 1'b0;
end 
// msg[ 20 ]
initial
begin
	msg[20] = 1'b0;
end 
// msg[ 19 ]
initial
begin
	msg[19] = 1'b0;
end 
// msg[ 18 ]
initial
begin
	msg[18] = 1'b0;
end 
// msg[ 17 ]
initial
begin
	msg[17] = 1'b0;
end 
// msg[ 16 ]
initial
begin
	msg[16] = 1'b0;
end 
// msg[ 15 ]
initial
begin
	msg[15] = 1'b0;
end 
// msg[ 14 ]
initial
begin
	msg[14] = 1'b0;
end 
// msg[ 13 ]
initial
begin
	msg[13] = 1'b0;
end 
// msg[ 12 ]
initial
begin
	msg[12] = 1'b0;
end 
// msg[ 11 ]
initial
begin
	msg[11] = 1'b0;
end 
// msg[ 10 ]
initial
begin
	msg[10] = 1'b0;
end 
// msg[ 9 ]
initial
begin
	msg[9] = 1'b0;
end 
// msg[ 8 ]
initial
begin
	msg[8] = 1'b0;
end 
// msg[ 7 ]
initial
begin
	msg[7] = 1'b0;
end 
// msg[ 6 ]
initial
begin
	msg[6] = 1'b0;
end 
// msg[ 5 ]
initial
begin
	msg[5] = 1'b0;
end 
// msg[ 4 ]
initial
begin
	msg[4] = 1'b0;
end 
// msg[ 3 ]
initial
begin
	msg[3] = 1'b0;
end 
// msg[ 2 ]
initial
begin
	msg[2] = 1'b0;
end 
// msg[ 1 ]
initial
begin
	msg[1] = 1'b0;
end 
// msg[ 0 ]
initial
begin
	msg[0] = 1'b0;
end 

aes_vlg_sample_tst tb_sample (
	.clk(clk),
	.key(key),
	.msg(msg),
	.reset(reset),
	.sampler_tx(sampler)
);

aes_vlg_check_tst tb_out(
	.mensagem_criptografada(mensagem_criptografada),
	.state_view(state_view),
	.sampler_rx(sampler)
);
endmodule

